<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.AspNet.SignalR.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.AspNet.SignalR.AuthorizeAttribute">
      <summary>Aplicar a concentradores y métodos de concentrador para autorizar conexiones de cliente a los concentradores y autorizar invocaciones de cliente de métodos de concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.AuthorizeAttribute" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.AuthorizeAttribute._requireOutgoing">
      <summary>Especifica si se debe aplicar la autorización solamente a las invocaciones de cualquiera de los métodos de servidor del concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>Determina si el cliente tiene autorización para conectarse a <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>true si el invocador tiene autorización para conectarse al concentrador; de lo contrario, false.</returns>
      <param name="hubDescriptor">La descripción del concentrador al que intenta conectarse el cliente.</param>
      <param name="request">La solicitud de conexión o reconexión del cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>Determina si el cliente tiene autorización para invocar el método <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>true si el invocador tiene autorización para invocar el método <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />; de lo contrario, false.</returns>
      <param name="hubIncomingInvokerContext">Un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" /> que proporciona detalles acerca de la invocación del método <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</param>
      <param name="appliesToMethod">true para indicar que la instancia de la interfaz es un atributo que se aplica directamente a un método; de lo contrario, false.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.RequireOutgoing">
      <summary>Se establece en false para aplicar la autorización solamente a las invocaciones de cualquiera de los métodos de servidor del concentrador.Esta propiedad solo afecta a los atributos que se aplican a la clase de concentrador.Esta propiedad no se puede leer.</summary>
      <returns>false para aplicar la autorización solamente a las invocaciones de cualquiera de los métodos de servidor del concentrador.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Roles">
      <summary>Obtiene o establece los roles de usuario.</summary>
      <returns>Roles de usuario.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.UserAuthorized(System.Security.Principal.IPrincipal)">
      <summary>Cuando se reemplaza, proporciona un punto de entrada para las comprobaciones de autorización personalizada.Lo invoca <see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)" /> y <see cref="M:Microsoft.AspNet.SignalR.AuthorizeAttribute.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)" />.</summary>
      <returns>true si el usuario está autorizado; de lo contrario, false.</returns>
      <param name="user">El elemento <see cref="T:System.Security.Principal.IPrincipal" /> para el cliente que se está autorizando.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.AuthorizeAttribute.Users">
      <summary>Obtiene o establece los usuarios autorizados.</summary>
      <returns>Usuarios autorizados.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionConfiguration">
      <summary>Representa una configuración de conexión.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionConfiguration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.EnableJSONP">
      <summary>Obtiene o establece un valor booleano que determina si JSONP está habilitado.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionConfiguration.Resolver">
      <summary>Obtiene o establece la resolución de dependencia que se debe usar para la conexión de concentrador.</summary>
      <returns>La resolución de dependencias que se debe usar para la conexión de concentrador.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionExtensions">
      <summary>Proporciona métodos de extensión que se usan para enviar un mensaje a todas las conexiones suscriptas a una señal concreta.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Broadcast(Microsoft.AspNet.SignalR.IConnection,System.Object,System.String[])">
      <summary>Difunde un valor a todas las conexiones, excepto a los identificadores de conexión especificados.</summary>
      <returns>Una tarea que representa cuándo se completa la difusión.</returns>
      <param name="connection">La conexión.</param>
      <param name="value">El valor que se va a difundir.</param>
      <param name="excludeConnectionIds">Lista de identificadores de conexión que se deben excluir en la difusión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.Collections.Generic.IList{System.String},System.Object)">
      <summary>Envía un mensaje a todas las conexiones suscritas a la señal especificada.Un ejemplo de una señal puede ser un identificador de conexión específico.</summary>
      <returns>Una tarea que representa cuándo se completa la difusión.</returns>
      <param name="connection">La conexión.</param>
      <param name="connectionIds">Los identificadores de conexión a los que realizar el envío.</param>
      <param name="value">El valor que se publicará.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionExtensions.Send(Microsoft.AspNet.SignalR.IConnection,System.String,System.Object)">
      <summary>Envía un mensaje a todas las conexiones suscritas a la señal especificada.Un ejemplo de una señal puede ser un identificador de conexión específico.</summary>
      <returns>Una tarea que representa cuándo se completa la difusión.</returns>
      <param name="connection">La conexión.</param>
      <param name="connectionId">El objeto connectionId al que realizar el envío.</param>
      <param name="value">El valor que se publicará.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.ConnectionMessage">
      <summary>Un mensaje enviado a una o más conexiones.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.Collections.Generic.IList{System.String},System.Object,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" />.</summary>
      <param name="signal">La señal.</param>
      <param name="value">La carga del mensaje.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.ConnectionMessage.#ctor(System.String,System.Object,System.Collections.Generic.IList{System.String})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.ConnectionMessage" />.</summary>
      <param name="signal">La señal.</param>
      <param name="value">La carga del mensaje.</param>
      <param name="excludedSignals">La señal que se debe excluir.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.ExcludedSignals">
      <summary>Representa una lista de señales que se deben usar para filtrar las conexiones que reciben este mensaje.</summary>
      <returns>Devuelve <see cref="T:System.Collections.Generic.IList`1" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signal">
      <summary>La señal a la que se debe enviar este mensaje.Las conexiones suscritas a esta señal recibirán la carga de mensaje.</summary>
      <returns>Devuelve <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Signals">
      <summary>Una lista de las señales a las que debe enviarse este mensaje.Si se usa esto, la señal no se puede utilizar.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.ConnectionMessage.Value">
      <summary>La carga del mensaje.</summary>
      <returns>Devuelve <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Cookie">
      <summary>Representa la cookie de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Cookie" />.</summary>
      <param name="name">El nombre de la propiedad de la cookie.</param>
      <param name="value">El valor de la propiedad de la cookie.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Cookie" />.</summary>
      <param name="name">El nombre de la propiedad de la cookie.</param>
      <param name="value">El valor de la propiedad de la cookie.</param>
      <param name="domain">La propiedad de dominio de la cookie.</param>
      <param name="path">La ruta de acceso de la propiedad de la cookie.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Domain">
      <summary>Obtiene o establece el dominio de la cookie.</summary>
      <returns>El dominio de la cookie.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Name">
      <summary>Obtiene o establece el nombre de la cookie.</summary>
      <returns>Nombre de la cookie.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Path">
      <summary>Obtiene o establece la ruta de acceso de la cookie.</summary>
      <returns>La ruta de acceso de la cookie.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Cookie.Value">
      <summary>Obtiene o establece el valor de la cookie.</summary>
      <returns>Valor de la cookie.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver">
      <summary>Representa una resolución de dependencia con comportamiento predeterminado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose">
      <summary>Libera los recursos que usa la instancia actual de la clase <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa instancia actual de la clase <see cref="T:Microsoft.AspNet.SignalR.DefaultDependencyResolver" /> y, opcionalmente, libera los recursos administrados.</summary>
      <param name="disposing">true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetService(System.Type)">
      <summary>Resuelve los servicios registrados de forma única que admiten la creación de objetos arbitrarios.</summary>
      <returns>El objeto o servicio solicitado.</returns>
      <param name="serviceType">Tipo de objeto o servicio solicitado.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.GetServices(System.Type)">
      <summary>Resuelve varios servicios registrados.</summary>
      <returns>Los servicios solicitados.</returns>
      <param name="serviceType">Tipo de servicios solicitados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>Registra los servicios especificados en la resolución de dependencia.</summary>
      <param name="serviceType">El tipo de servicios que se van a registrar.</param>
      <param name="activators">Los servicios que se van a registrar en la resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DefaultDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>Registra el servicio especificado en la resolución de dependencia.</summary>
      <param name="serviceType">El tipo de servicio que se va a registrar.</param>
      <param name="activator">El servicio que se va a registrar en la resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Resuelve el tipo de extensiones.</summary>
      <returns>Devuelve un objeto para resolver el tipo de extensiones.</returns>
      <param name="resolver">Resolución de dependencia.</param>
      <typeparam name="T">Tipo que se va a resolver.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.Resolve(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>Resuelve el tipo de extensiones.</summary>
      <returns>Devuelve un objeto para resolver el tipo de extensiones.</returns>
      <param name="resolver">Resolución de dependencia.</param>
      <param name="type">Tipo que se va a resolver.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll``1(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Resuelve todos los tipos de extensiones.</summary>
      <returns>Devuelve una colección de extensiones para resolver su tipo.</returns>
      <param name="resolver">Resolución de dependencia.</param>
      <typeparam name="T">Tipo que se va a resolver.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.DependencyResolverExtensions.ResolveAll(Microsoft.AspNet.SignalR.IDependencyResolver,System.Type)">
      <summary>Resuelve todos los tipos de extensiones.</summary>
      <returns>Devuelve una colección de extensiones para resolver su tipo.</returns>
      <param name="resolver">Resolución de dependencia.</param>
      <param name="type">Tipo que se va a resolver.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GlobalHost">
      <summary>Proporciona acceso a la información de host predeterminada.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.Configuration">
      <summary>Obtiene el objeto <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" /> predeterminado.</summary>
      <returns>La <see cref="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager" /> predeterminada.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.ConnectionManager">
      <summary>Obtiene el objeto <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> predeterminado.</summary>
      <returns>La <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> predeterminada.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.DependencyResolver">
      <summary>Obtiene o establece el elemento <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" /> predeterminado.</summary>
      <returns>La <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" /> predeterminada.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.HubPipeline">
      <summary>Obtiene el objeto <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> predeterminado.</summary>
      <returns>La <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> predeterminada.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.GlobalHost.TraceManager">
      <summary>Obtiene el <see cref="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager" /> predeterminado.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.GroupManager">
      <summary>Administra los grupos para una conexión.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.#ctor(Microsoft.AspNet.SignalR.IConnection,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.GroupManager" />.</summary>
      <param name="connection">La <see cref="T:Microsoft.AspNet.SignalR.IConnection" /> en el que reside el grupo.</param>
      <param name="groupPrefix">El prefijo para este grupo.Un nombre de <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> o nombre de tipo de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Add(System.String,System.String)">
      <summary>Agrega una conexión al grupo especificado.</summary>
      <returns>Tarea que representa el identificador de conexión que se agrega al grupo.</returns>
      <param name="connectionId">El identificador de conexión que se debe agregar al grupo.</param>
      <param name="groupName">Nombre del grupo.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Remove(System.String,System.String)">
      <summary>Quita una conexión del grupo especificado.</summary>
      <returns>Tarea que representa el identificador de conexión que se quita del grupo.</returns>
      <param name="connectionId">El identificador de conexión que se debe quitar del grupo.</param>
      <param name="groupName">Nombre del grupo.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>Envía un valor al grupo especificado.</summary>
      <returns>Una tarea que representa cuándo el envío se ha completado.</returns>
      <param name="groupNames">Los nombres de los grupos.</param>
      <param name="value">Valor que se va a enviar.</param>
      <param name="excludeConnectionIds">La lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.GroupManager.Send(System.String,System.Object,System.String[])">
      <summary>Envía un valor al grupo especificado.</summary>
      <returns>Una tarea que representa cuándo el envío se ha completado.</returns>
      <param name="groupName">Nombre del grupo.</param>
      <param name="value">Valor que se va a enviar.</param>
      <param name="excludeConnectionIds">La lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hub">
      <summary>Proporciona métodos que se comunican con las conexiones de SignalR conectadas a un <see cref="T:Microsoft.AspNet.SignalR.Hub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Clients">
      <summary>Obtiene o establece los clientes que se comunican mediante conexiones SignalR.</summary>
      <returns>Los clientes que se comunican mediante conexiones SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Context">
      <summary>Obtiene o establece la información acerca del cliente que llama.</summary>
      <returns>Información acerca del cliente que llama.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose">
      <summary>Libera todos los recursos utilizados por esta instancia.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
      <summary>Libera todos los recursos utilizados por esta instancia.</summary>
      <param name="disposing">true para liberar los recursos administrados y los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hub.Groups">
      <summary>Obtiene o establece el administrador de grupos para la instancia de este concentrador.</summary>
      <returns>El administrador de grupos para esta instancia del concentrador.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnConnected">
      <summary>Se produce cuando la conexión se conecta a la instancia de este concentrador.</summary>
      <returns>El resultado de la operación.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnDisconnected">
      <summary>Se produce cuando la conexión se desconecta de la instancia de este concentrador.</summary>
      <returns>El resultado de la operación.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hub.OnReconnected">
      <summary>Se produce cuando la conexión se vuelve a conectar a la instancia de este concentrador.</summary>
      <returns>El resultado de la operación.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubConfiguration">
      <summary>Representa una configuración de concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubConfiguration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors">
      <summary>Determina si las excepciones detalladas lanzadas en los métodos de concentrador se vuelven a informar al cliente invocador.El valor predeterminado es false.</summary>
      <returns>true si las excepciones detalladas lanzadas en los métodos de concentrador se vuelven a informar al cliente invocador; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableJavaScriptProxies">
      <summary>Determina si los servidores proxy de JavaScript para los concentradores de servidor se deben generar automáticamente en {Path}/hubs.El valor predeterminado es true.</summary>
      <returns>true si los servidores proxy de JavaScript para los concentradores de servidor se deben generar automáticamente en {Path}/hubs; de lo contrario, false.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.HubException"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.HubException.#ctor(System.String,System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.HubException.ErrorData"></member>
    <member name="T:Microsoft.AspNet.SignalR.HubPipelineExtensions">
      <summary>Proporciona métodos de extensión para agregar funcionalidad personalizada a los tipos de datos.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.HubPipelineExtensions.RequireAuthentication(Microsoft.AspNet.SignalR.Hubs.IHubPipeline)">
      <summary>Al solicitar autenticación, se agrega un <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> a <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> con autorizadores <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection" /> y <see cref="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation" /> que se aplicarán globalmente a todos los concentradores y métodos de concentrador.Estos autorizadores requieren que el valor de <see cref="T:System.Security.Principal.IIdentity" /> de <see cref="T:System.Security.Principal.IPrincipal" /> sea IsAuthenticated para todos los clientes que invoquen métodos de concentrador de servidor o reciban invocaciones de métodos de concentrador de cliente.</summary>
      <param name="pipeline">
        <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> a que se agregará <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" />.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnection">
      <summary>Un canal de comunicación para una <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> y sus conexiones.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IConnection.DefaultSignal">
      <summary>La señal principal para esta conexión.Esta es la señal principal para una <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>Envía un mensaje a las conexiones suscritas a la señal.</summary>
      <returns>Una tarea que devuelve cuándo se ha enviado el mensaje.</returns>
      <param name="message">El mensaje que se va a enviar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IConnectionGroupManager">
      <summary>Administra los grupos para una conexión y permite enviar mensajes al grupo.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.Collections.Generic.IList{System.String},System.Object,System.String[])">
      <summary>Envía un valor a los grupos especificados.</summary>
      <returns>Una tarea que representa cuándo el envío se ha completado.</returns>
      <param name="groupNames">Los nombres de los grupos.</param>
      <param name="value">Valor que se va a enviar.</param>
      <param name="excludeConnectionIds">La lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IConnectionGroupManager.Send(System.String,System.Object,System.String[])">
      <summary>Envía un valor al grupo especificado.</summary>
      <returns>Una tarea que representa cuándo el envío se ha completado.</returns>
      <param name="groupName">Nombre del grupo.</param>
      <param name="value">Valor que se va a enviar.</param>
      <param name="excludeConnectionIds">Lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IDependencyResolver">
      <summary>Proporciona una interfaz que representa la resolución de dependencia para SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetService(System.Type)">
      <summary>Devuelve el servicio para el tipo dado.</summary>
      <returns>El servicio devuelto.</returns>
      <param name="serviceType">El tipo de servicio que se va a devolver.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.GetServices(System.Type)">
      <summary>Devuelve los servicios para el tipo dado.</summary>
      <returns>Los servicios devueltos.</returns>
      <param name="serviceType">El tipo de servicio que se va a devolver.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Collections.Generic.IEnumerable{System.Func{System.Object}})">
      <summary>Registra un servicio del tipo especificado.</summary>
      <param name="serviceType">El tipo de servicio que se va a registrar.</param>
      <param name="activators">Una lista de delegados de función que aceptan un parámetro que representa el servicio que se va a activar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IDependencyResolver.Register(System.Type,System.Func{System.Object})">
      <summary>Registra un servicio del tipo especificado.</summary>
      <param name="serviceType">El tipo de servicio que se va a registrar.</param>
      <param name="activator">Un delegado de función que acepta un parámetro que representa el servicio que se va a activar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IGroupManager">
      <summary>Administra los grupos para una conexión.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Add(System.String,System.String)">
      <summary>Agrega una conexión al grupo especificado.</summary>
      <returns>Tarea que representa el identificador de conexión que se agrega al grupo.</returns>
      <param name="connectionId">El identificador de conexión que se debe agregar al grupo.</param>
      <param name="groupName">Nombre del grupo.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IGroupManager.Remove(System.String,System.String)">
      <summary>Quita una conexión del grupo especificado.</summary>
      <returns>Tarea que representa el identificador de conexión que se quita del grupo.</returns>
      <param name="connectionId">El identificador de conexión que se debe quitar del grupo.</param>
      <param name="groupName">Nombre del grupo.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IHubContext">
      <summary>Proporciona acceso a información acerca de una <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Clients">
      <summary>Encapsula toda la información acerca de una conexión SignalR para un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IHubContext.Groups">
      <summary>Obtiene el <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" /> para el concentrador.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.IGroupManager" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext">
      <summary>Proporciona acceso a información acerca de una <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Connection">
      <summary>Obtiene el <see cref="T:Microsoft.AspNet.SignalR.IConnection" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IPersistentConnectionContext.Groups">
      <summary>Obtiene el <see cref="T:Microsoft.AspNet.SignalR.IConnectionGroupManager" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IRequest">
      <summary>Representa una solicitud SignalR.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Cookies">
      <summary>Obtiene las cookies para la conexión de cliente.</summary>
      <returns>Las cookies para la conexión de cliente.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Environment">
      <summary>Obtiene el entorno OWIN.</summary>
      <returns>El entorno OWIN.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Headers">
      <summary>Obtiene o establece los encabezados para las solicitudes.</summary>
      <returns>Los encabezados para las solicitudes.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.LocalPath">
      <summary>Obtiene la parte de la ruta de acceso local de la dirección URL.</summary>
      <returns>La parte de la ruta de acceso local de la dirección URL.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.QueryString">
      <summary>Obtiene la colección de variables de cadena de la consulta IRequest.</summary>
      <returns>La colección de variables de cadena de la consulta IRequest.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.IRequest.ReadForm">
      <summary>Lee el formulario de la solicitud HTTP.</summary>
      <returns>El formulario de la solicitud HTTP que se va a leer.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.Url">
      <summary>Obtiene la dirección URL del objeto IRequest.</summary>
      <returns>Obtiene el URI del objeto IRequest.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.IRequest.User">
      <summary>Obtiene el usuario principal del objeto IRequest.</summary>
      <returns>El usuario principal del objeto IRequest.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.IUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.IUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.PersistentConnection">
      <summary> Representa una conexión entre el cliente y el servidor. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.AckHandler">
      <summary>Obtiene o establece el controlador ACK de esta conexión.</summary>
      <returns>Controlador ACK de esta conexión.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Authorize(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Determina si esta conexión está autorizada.</summary>
      <returns>true si la conexión está autorizada; de lo contrario, false.</returns>
      <param name="request">Solicitud.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Determina si la solicitud de conexión está autorizada.</summary>
      <returns>true si la solicitud de conexión está autorizada; de lo contrario, false.</returns>
      <param name="request">Solicitud.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Connection">
      <summary>Obtiene o establece la conexión.</summary>
      <returns>La conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Counters">
      <summary>Obtiene o establece el administrador de contadores de rendimiento.</summary>
      <returns>Administrador de contadores de rendimiento.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.GetSignals(System.String,System.String)">
      <summary>Devuelve las señales que se usan en la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>Las señales que se usan para esta <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <param name="userId">El identificador de usuario de la conexión actual.</param>
      <param name="connectionId">El identificador de la conexión entrante.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Groups">
      <summary>Obtiene o establece los grupos de conexión.</summary>
      <returns>Grupos de conexión</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.JsonSerializer">
      <summary>Obtiene o establece el serializador JSON.</summary>
      <returns>Serializador JSON.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.MessageBus">
      <summary>Obtiene o establece el bus de mensajes para la conexión.</summary>
      <returns>Bus de mensajes para la conexión.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Se llama cuando se crea una nueva conexión.</summary>
      <returns>Una <see cref="T:System.Threading.Tasks.Task" /> que se completa una vez completada la operación de conexión.</returns>
      <param name="request">Solicitud para la conexión actual.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Se llama cuando se desconecta una conexión.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> que se completa cuando finaliza la operación de desconexión.</returns>
      <param name="request">Solicitud para la conexión actual.</param>
      <param name="connectionId">Identificador del cliente de desconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>Se llama cuando se reciben datos desde una conexión.</summary>
      <returns>Una <see cref="T:System.Threading.Tasks.Task" /> que se completa una vez completada la operación de recepción.</returns>
      <param name="request">Solicitud para la conexión actual.</param>
      <param name="connectionId">El identificador de la conexión que envía los datos.</param>
      <param name="data">La carga enviada a la conexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Se llama cuando una conexión se reconecta después de un tiempo de espera agotado.</summary>
      <returns>Una <see cref="T:System.Threading.Tasks.Task" /> que se completa una vez completada la operación de reconexión.</returns>
      <param name="request">Solicitud para la conexión actual.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>Se llama cuando una conexión se reconecta después de un tiempo de espera agotado para determinar los grupos que se deben volver a unir.</summary>
      <returns>Una colección de nombres de grupo que deben unirse al reconectar.</returns>
      <param name="request">Solicitud para la conexión actual.</param>
      <param name="groups">Los grupos a los que la conexión de llamada dice pertenecer.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Controla todas las solicitudes para una <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>Una <see cref="T:System.Threading.Tasks.Task" /> que se completa una vez completada la canalización de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <param name="context">El <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> para la solicitud actual.</param>
      <exception cref="InvalidOperationException">Se lanza si la conexión no se inicializó.Se lanza si el transporte no se ha especificado.Se lanza si no se especificó el identificador de conexión.</exception>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.PersistentConnection.ProcessRequest(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>El punto de entrada OWIN.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.ProtectedData">
      <summary>Obtiene o establece los datos protegidos de esta conexión.</summary>
      <returns>Datos protegidos de esta conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Trace">
      <summary>Obtiene el origen de la conexión.</summary>
      <returns>Origen de la conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.TraceManager">
      <summary>Obtiene o establece el administrador de seguimiento.</summary>
      <returns>Administrador de seguimiento.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.Transport">
      <summary>Obtiene o establece el transporte asociado con esta conexión.</summary>
      <returns>Transporte asociado con esta conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.PersistentConnection.UserIdProvider"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager">
      <summary>Proporciona acceso al administrador de la configuración predeterminada del servidor.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.ConnectionTimeout">
      <summary>Obtiene o establece un objeto TimeSpan que representa la cantidad de tiempo que una conexión debe permanecer activa antes de agotar el tiempo de espera.</summary>
      <returns>Un objeto TimeSpan que representa la cantidad de tiempo que una conexión debe permanecer activa antes de agotar el tiempo de espera.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DefaultMessageBufferSize">
      <summary>Obtiene o establece el número de mensajes que se deben almacenar en el búfer para una señal específica.</summary>
      <returns>El número de mensajes que se deben almacenar en el búfer para una señal específica.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.DisconnectTimeout">
      <summary>Obtiene o establece un objeto TimeSpan que representa la cantidad de tiempo que se debe esperar después de la desaparición de una conexión antes de que se llame al evento de desconexión.</summary>
      <returns>Un objeto TimeSpan que representa la cantidad de tiempo que se debe esperar después de la desaparición de una conexión antes de que se llame al evento de desconexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.KeepAlive">
      <summary>Obtiene o establece un objeto TimeSpan que representa la cantidad de tiempo entre el envío de mensajes de mantenimiento de conexión.Si se habilita, este valor debe ser al menos dos segundos.Para deshabilitar, se debe establecer en null.</summary>
      <returns>Un objeto TimeSpan que representa la cantidad de tiempo entre el envío de mensajes de mantenimiento de conexión.Si se habilita, este valor debe ser al menos dos segundos.Para deshabilitar, se debe establecer en null.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.LongPollDelay"></member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager.TransportConnectTimeout"></member>
    <member name="T:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager">
      <summary>Proporciona acceso a la configuración del servidor.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.ConnectionTimeout">
      <summary>Obtiene o establece un <see cref="T:System.TimeSpan" /> que representa la cantidad de tiempo que una conexión debe permanecer activa antes de agotar el tiempo de espera.</summary>
      <returns>Un objeto <see cref="T:System.TimeSpan" /> que representa la cantidad de tiempo que una conexión debe permanecer activa antes de agotar el tiempo de espera.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DefaultMessageBufferSize">
      <summary>Obtiene o establece el número de mensajes que se deben almacenar en el búfer para una señal específica.</summary>
      <returns>El número de mensajes que se deben almacenar en el búfer para una señal específica.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.DisconnectTimeout">
      <summary>Obtiene o establece un <see cref="T:System.TimeSpan" /> que representa la cantidad de tiempo que se debe esperar después de la desaparición de una conexión antes de que se llame al evento de desconexión.</summary>
      <returns>Un objeto <see cref="T:System.TimeSpan" /> que representa la cantidad de tiempo que se debe esperar después de la desaparición de una conexión antes de que se llame al evento de desconexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.KeepAlive">
      <summary>Obtiene o establece un <see cref="T:System.TimeSpan" /> que representa la cantidad de tiempo entre el envío de mensajes de mantenimiento de conexión.Si se habilita, este valor debe ser al menos dos segundos.Para deshabilitar, se debe establecer en null.</summary>
      <returns>Un objeto <see cref="T:System.TimeSpan" /> que representa la cantidad de tiempo entre el envío de mensajes de mantenimiento de conexión.Si se habilita, este valor debe ser al menos dos segundos.Para deshabilitar, se debe establecer en null.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.LongPollDelay">
      <summary>Obtiene o establece un objeto <see cref="T:System.TimeSpan" /> que representa la indicación al cliente que debe esperar hasta restablecer una conexión de sondeo larga después de que se envíen datos del servidor.El valor predeterminado es 0.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Configuration.IConfigurationManager.TransportConnectTimeout">
      <summary>Obtiene o establece un objeto <see cref="T:System.TimeSpan" /> que representa la cantidad de tiempo que un cliente debe permitir para conectarse antes de recurra a otro transporte o se produzca un error.El valor predeterminado es 5 segundos.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostContext">
      <summary>Representa el contexto del host de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(Microsoft.AspNet.SignalR.IRequest,Microsoft.AspNet.SignalR.Hosting.IResponse)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" />.</summary>
      <param name="environment">Entorno del host de SignalR.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Environment">
      <summary>Obtiene el entorno del host de SignalR.</summary>
      <returns>Entorno del host de SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Request"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.HostContext.Response"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions">
      <summary>Representa el host para las extensiones de resolución de dependencia.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions.InitializeHost(Microsoft.AspNet.SignalR.IDependencyResolver,System.String,System.Threading.CancellationToken)">
      <summary>Inicializa el host para las extensiones de resolución de dependencia.</summary>
      <param name="resolver">El objeto IDependencyResolver.</param>
      <param name="instanceName">Nombre de la instancia.</param>
      <param name="hostShutdownToken">El token de cierre del host.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.INameValueCollection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Get(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.GetValues(System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.INameValueCollection.Item(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.IResponse">
      <summary>Representa una conexión al cliente.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.CancellationToken">
      <summary>Obtiene un token de cancelación que representa la vida del cliente.</summary>
      <returns>Un token de cancelación que representa la vida útil del cliente.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hosting.IResponse.ContentType">
      <summary>Obtiene o establece el tipo de conexión de la respuesta.</summary>
      <returns>Tipo de contenido de la respuesta.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Flush">
      <summary>Vacía las respuestas en búfer al cliente.</summary>
      <returns>Tarea que representa cuándo se han vaciado los datos.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.IResponse.Write(System.ArraySegment{System.Byte})">
      <summary>Escribe datos en búfer.</summary>
      <param name="data">Los datos que se van a escribir en el búfer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory">
      <summary>Responsable de crear las instancias de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Crea una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory" />.</summary>
      <param name="resolver">La resolución de dependencias que se debe usar al crear la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory.CreateInstance(System.Type)">
      <summary>Crea una instancia del tipo especificado mediante la resolución de dependencias o el constructor predeterminado del tipo.</summary>
      <returns>Instancia de una <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <param name="connectionType">Tipo de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> que se debe crear.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions">
      <summary>Métodos de extensión para <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hosting.ResponseExtensions.End(Microsoft.AspNet.SignalR.Hosting.IResponse,System.String)">
      <summary>Cierra la conexión a un cliente con datos óptimos.</summary>
      <returns>Una tarea que representa cuándo se cierra la conexión.</returns>
      <param name="response">La <see cref="T:Microsoft.AspNet.SignalR.Hosting.IResponse" />.</param>
      <param name="data">Los datos que se van a escribir en la conexión.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule">
      <summary>Aplica atributos de autorización de la clase <see cref="T:Microsoft.AspNet.SignalR.Hub" /> para determinar si se permite que los clientes reciban mensajes enviados desde el concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.#ctor(Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection,Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" />.</summary>
      <param name="globalConnectionAuthorizer">El autorizador de conexión global.</param>
      <param name="globalInvocationAuthorizer">El autorizador de invocación global.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>Ajusta una función que se debe llamar antes de que un cliente se suscriba a las señales que pertenecen al concentrador que describe el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.De manera predeterminada, <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> buscará atributos en el concentrador para ayudar a determinar si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador descrito.La función devuelve true si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador de cliente; de lo contrario, devuelve false.</summary>
      <returns>Una función ajustada que indica si el cliente está autorizado o no para conectarse al concentrador descrito.</returns>
      <param name="authorizeConnect">Una función que indica si el cliente está autorizado o no para conectarse al concentrador descrito.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>Ajusta una función que invoca un método de concentrador de servidor.Incluso si un cliente no tiene autorización para conectarse a un concentrador, aún tendrá autorización para invocar métodos de servidor en dicho concentrador, a menos que se impida en <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> mediante la no ejecución del parámetro de invocación.</summary>
      <returns>Una función ajustada que invoca un método de concentrador de servidor.</returns>
      <param name="invoke">Una función que invoca un método de concentrador de servidor.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation">
      <summary>Describe una invocación del método del concentrador cliente.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Args">
      <summary>La lista de argumentos del método con el que se llamará al concentrador de cliente.</summary>
      <returns>La lista de argumentos asociados con el método de concentrador cliente.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Hub">
      <summary>Obtiene o establece el nombre del concentrador al que pertenece el método que se invoca.</summary>
      <returns>El nombre del concentrador al que pertenece el método que se invoca.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.Method">
      <summary>Obtiene o establece el nombre del método de concentrador cliente que se debe invocar.</summary>
      <returns>El nombre del método de concentrador de cliente que se invoca.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation.State">
      <summary>Obtiene o establece un almacén de pares de clave y valor que representa el estado de concentrador en el servidor que ha cambiado desde la última vez que el estado del concentrador se envió al cliente.</summary>
      <returns>Un almacén de par de clave y valor que representa el estado del concentrador en el servidor.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy">
      <summary>Representa un proxy de servidor para el concentrador de cliente.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])">
      <summary>Invoca un método en las conexiones representadas por la instancia de <see cref="T:Microsoft.AspNet.SignalR.Hubs.ClientProxy" />.</summary>
      <returns>Tarea que representa cuándo se han enviado datos al cliente.</returns>
      <param name="method">El nombre del método que se invoca.</param>
      <param name="args">Los argumentos que se pasan al cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Ejecuta el método <see cref="M:Microsoft.AspNet.SignalR.Hubs.ClientProxy.Invoke(System.String,System.Object[])" />.</summary>
      <returns>Siempre es true.</returns>
      <param name="binder">La información que contiene semántica de enlace y detalles de la operación de concentrador de cliente.</param>
      <param name="args">Los argumentos que se pasan al miembro de objeto durante la operación de invocación.</param>
      <param name="result">Cuando se devuelve el método, contiene el resultado de la invocación de miembro.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy">
      <summary>Representa un proxy de identificador de conexión para el concentrador de cliente.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String[])"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator">
      <summary>Representa el localizador del ensamblado predeterminado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator.GetAssemblies">
      <summary>Obtiene los ensamblados que se han cargado en el dominio de aplicación actual.</summary>
      <returns>Una matriz de ensamblados en el dominio de aplicación actual.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator">
      <summary>Representa el activador predeterminado para los concentradores SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator" />.</summary>
      <param name="resolver">Resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Crea un nuevo activador de concentrador.</summary>
      <returns>El activador de concentrador creado.</returns>
      <param name="descriptor">El descriptor.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager">
      <summary>Representa un administrador de concentradores predeterminado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager" />.</summary>
      <param name="resolver">La resolución del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHub(System.String)">
      <summary>Recupera un único descriptor de concentrador.</summary>
      <returns>El descriptor del concentrador, si se encuentra; de lo contrario null.</returns>
      <param name="hubName">El nombre del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Recupera un método con un nombre dado de un concentrador concreto.</summary>
      <returns>El descriptor del método, si se encuentra.De lo contrario, null.</returns>
      <param name="hubName">El nombre del concentrador.</param>
      <param name="method">El nombre del método que se debe buscar.</param>
      <param name="parameters">Los parámetros del método que deben coincidir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>Obtiene todos los métodos disponibles a los que se puede llamar en un concentrador dado.</summary>
      <returns>La lista de métodos disponibles.</returns>
      <param name="hubName">El nombre del concentrador.</param>
      <param name="predicate">Un predicado opcional para filtrar los resultados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>Recupera todos los concentradores disponibles que coinciden con el predicado dado.</summary>
      <returns>La lista de descriptores del concentrador.</returns>
      <param name="predicate">El predicado.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHub(System.String)">
      <summary>Resuelve un nombre de concentrador dado en un objeto concreto.</summary>
      <returns>La instancia de implementación del concentrador, si se encuentra.De lo contrario, null.</returns>
      <param name="hubName">El nombre del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultHubManager.ResolveHubs">
      <summary>Resuelve todos los concentradores disponibles en sus objetos concretos.</summary>
      <returns>La lista de instancias del concentrador.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator">
      <summary>Representa un generador para el proxy de JavaScript predeterminado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubManager,Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" />.</summary>
      <param name="manager">El administrador del concentrador.</param>
      <param name="javaScriptMinifier">Minificador de JavaScript.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator" />.</summary>
      <param name="resolver">Resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>Genera un proxy especificado.</summary>
      <returns>Proxy generado.</returns>
      <param name="serviceUrl">Dirección URL del servicio.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator.GenerateProxy(System.String,System.Boolean)">
      <summary>Genera un proxy especificado.</summary>
      <returns>Proxy generado.</returns>
      <param name="serviceUrl">Dirección URL del servicio.</param>
      <param name="includeDocComments">true para incluir comentarios Doc; de lo contrario, false.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver">
      <summary>Representa la resolución predeterminada para el parámetro de concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Resuelve los valores de parámetro del método en función de los objetos proporcionados.</summary>
      <returns>La matriz de valores de parámetros.</returns>
      <param name="method">El descriptor del método.</param>
      <param name="values">La lista de valores desde los que se resuelven los valores de parámetro.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver.ResolveParameter(Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor,Microsoft.AspNet.SignalR.Json.IJsonValue)">
      <summary>Resuelve un valor de parámetro a partir del objeto proporcionado.</summary>
      <returns>Valor del parámetro.</returns>
      <param name="descriptor">Descriptor del parámetro.</param>
      <param name="value">El valor desde el que se resuelve el valor del parámetro.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.Descriptor">
      <summary>Describe la información del concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.Descriptor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.Descriptor" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.Name">
      <summary>Obtiene o establece el nombre de concentrador.</summary>
      <returns>El nombre del concentrador.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.Descriptor.NameSpecified">
      <summary>Obtiene o establece un valor que indica si se especifica un nombre de atributo de concentrador.</summary>
      <returns>true si se especifica un nombre de atributo de concentrador; en caso contrario, false.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary">
      <summary>Contiene un objeto del diccionario para almacenar los pares de clave y valor, y reemplaza los métodos TrySetMember y TryGetMember para admitir la nueva sintaxis.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary" />.</summary>
      <param name="obj">El objeto de diccionario.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Agrega un objeto de par de clave y valor especificado al diccionario.</summary>
      <param name="item">El objeto de par de clave y valor que se va a agregar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Add(System.String,System.Object)">
      <summary>Agrega el par de clave y valor especificado al diccionario.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Clear">
      <summary>Quita todos los valores de claves y valores del diccionario.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determina si el diccionario contiene un elemento de par de clave y valor específico.</summary>
      <returns>true si el diccionario contiene un elemento con el valor especificado; de lo contrario, false.</returns>
      <param name="item">El elemento de par de clave y valor que se debe buscar en el diccionario.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.ContainsKey(System.String)">
      <summary>Determina si el diccionario contiene la clave especificada.</summary>
      <returns>true si el diccionario contiene la clave especificada; de lo contrario, false.</returns>
      <param name="key">La clave que se va a buscar el diccionario.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copia los elementos de par de clave y valor en una matriz unidimensional existente, a partir del índice de matriz especificado.</summary>
      <param name="array">La matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario.</param>
      <param name="arrayIndex">El índice de base cero de la matriz donde se comienza a copiar.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Count">
      <summary>Obtiene el número de elementos del diccionario.</summary>
      <returns>El número de elementos del diccionario.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.GetEnumerator">
      <summary>Devuelve un enumerador que crea una iteración por el diccionario.</summary>
      <returns>El enumerador que crea una iteración por el diccionario.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.IsReadOnly">
      <summary>Obtiene información sobre si el diccionario dinámico es de solo lectura.</summary>
      <returns>true si el diccionario dinámico es de solo lectura; en caso contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Item(System.String)">
      <summary>Obtiene o establece el elemento con la clave específica del diccionario.</summary>
      <returns>El elemento con la clave específica del diccionario.</returns>
      <param name="key">La clave del elemento.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Keys">
      <summary>La colección de claves incluidas en el diccionario.</summary>
      <returns>Una colección de claves incluidas en el diccionario.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Quita del diccionario un elemento de par de clave y valor especificado.</summary>
      <returns>El diccionario del que se quitó el elemento.</returns>
      <param name="item">Elemento que se va a quitar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Remove(System.String)">
      <summary>Quita una clave específica del diccionario.</summary>
      <returns>El diccionario del que se quitó la clave.</returns>
      <param name="key">La clave que se va a quitar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtiene un enumerador que se itera por toda una colección.</summary>
      <returns>El enumerador que crea una iteración por la colección.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Proporciona la implementación para las operaciones que obtienen valores del miembro.</summary>
      <returns>true si la operación se lleva a cabo correctamente; en caso contrario, false.</returns>
      <param name="binder">Proporciona información sobre el objeto que llamó a la operación dinámica.</param>
      <param name="result">El resultado de la operación get.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Obtiene el valor asociado con la clave especificada.</summary>
      <returns>true si el diccionario contiene un elemento con la clave especificada; de lo contrario, false.</returns>
      <param name="key">Clave del valor que se va a obtener.</param>
      <param name="value">Cuando este método devuelve el resultado, contiene el valor asociado a la clave especificada, si se encuentra la clave; en caso contrario, el valor predeterminado para el tipo del parámetro de valor.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Proporciona la implementación para las operaciones que establecen valores del miembro.</summary>
      <returns>true si la operación se lleva a cabo correctamente; en caso contrario, false.</returns>
      <param name="binder">Proporciona información sobre el objeto que llamó a la operación dinámica.</param>
      <param name="value">Valor que se va a establecer para el miembro.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Unwrap(System.Object)">
      <summary>Desencapsula un valor especificado asociado con el diccionario.</summary>
      <returns>El valor desencapsulado.</returns>
      <param name="value">El valor que se debe desencapsular.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Values">
      <summary>Obtiene una colección de valores incluidos en el diccionario.</summary>
      <returns>Una colección de valores incluidos en el diccionario.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.DynamicDictionary.Wrap(System.Object)">
      <summary>Encapsula un valor especificado asociado con el diccionario.</summary>
      <returns>El valor encapsulado.</returns>
      <param name="value">Valor para ajustar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator">
      <summary>Representa un generador para el proxy de JavaScript vacío.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>Genera un proxy con una dirección URL especificada.</summary>
      <returns>Proxy generado.</returns>
      <param name="serviceUrl">Dirección URL del servicio.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator">
      <summary>Representa el enumerable asociado con el localizador del ensamblado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator" />.</summary>
      <param name="assemblies">Los ensamblados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator.GetAssemblies">
      <summary>Devuelve la lista de ensamblados.</summary>
      <returns>La lista de ensamblados.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ExceptionContext"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.#ctor(System.Exception)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Error">
      <summary>La excepción que se va a enviar al cliente que llama.Una excepción genérica lo invalidará a menos que el error sea un objeto <see cref="T:Microsoft.AspNet.SignalR.HubException" /> el objeto <see cref="P:Microsoft.AspNet.SignalR.HubConfiguration.EnableDetailedErrors" /> se establece en true.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ExceptionContext.Result">
      <summary>El valor que se debe devolver en lugar de lanzar un error.Cuando se establece Result, Error se establece en null.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.GroupProxy">
      <summary>Representa un grupo de servidores proxy de señal que usa el concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.GroupProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext">
      <summary>Representa el contexto que llama del cliente.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.#ctor(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" />.</summary>
      <param name="request">La solicitud HTTP actual.</param>
      <param name="connectionId">El identificador de conexión.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.ConnectionId">
      <summary>Obtiene el identificador de conexión del cliente que realiza la llamada.</summary>
      <returns>El identificador de conexión del cliente que realiza la llamada.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Headers">
      <summary>Obtiene los encabezados para la solicitud.</summary>
      <returns>Los encabezados para la solicitud.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.QueryString">
      <summary>Obtiene la cadena de consulta para la solicitud.</summary>
      <returns>La cadena de consulta para la solicitud.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.Request">
      <summary>Obtiene el objeto <see cref="T:Microsoft.AspNet.SignalR.IRequest" /> de la solicitud HTTP actual.</summary>
      <returns>
        <see cref="T:Microsoft.AspNet.SignalR.IRequest" /> para la solicitud HTTP actual.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.RequestCookies">
      <summary>Obtiene las cookies para la solicitud.</summary>
      <returns>Las cookies para la solicitud.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubCallerContext.User">
      <summary>Obtiene <see cref="T:System.Security.Principal.IPrincipal" /> para la solicitud.</summary>
      <returns>
        <see cref="T:System.Security.Principal.IPrincipal" /> para la solicitud.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext">
      <summary>Encapsula toda la información acerca de una conexión SignalR individual para un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.#ctor(Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,Microsoft.AspNet.SignalR.IConnection,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext" />.</summary>
      <param name="pipelineInvoker">El invocador de canalización.</param>
      <param name="connection">La conexión de la interfaz.</param>
      <param name="hubName">Nombre del concentrador.</param>
      <param name="connectionId">Identificador de conexión.</param>
      <param name="tracker">El control de cambio de estado.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Caller">
      <summary>Obtiene o establece el cliente que llama.</summary>
      <returns>El cliente que llama.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.Others">
      <summary>Obtiene o establece todos los clientes conectados, excepto el cliente que llama.</summary>
      <returns>Todos los clientes conectados, excepto el cliente que llama.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroup(System.String)">
      <summary>Devuelve una representación dinámica de todos los clientes de un grupo, excepto el cliente que llama.</summary>
      <returns>Una representación dinámica de todos los clientes de un grupo, excepto el cliente que llama.</returns>
      <param name="groupName">Nombre del grupo.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})">
      <summary>Devuelve una representación dinámica de todos los clientes de los grupos especificados, excepto el cliente que llama.</summary>
      <returns>Una representación dinámica de todos los clientes de un grupo, excepto el cliente que llama.</returns>
      <param name="groupNames">El nombre de los grupos.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.All"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.AllExcept(System.String[])">
      <summary>Devuelve una representación dinámica de todos los clientes, excepto los clientes que llaman especificados.</summary>
      <returns>Una representación dinámica de todos los clientes, excepto los clientes que llaman especificados.</returns>
      <param name="excludeConnectionIds">La lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Client(System.String)">
      <summary>Devuelve una representación dinámica de la conexión con el identificador de conexión especificado.</summary>
      <returns>Una representación dinámica del cliente especificado.</returns>
      <param name="connectionId">El identificador de conexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Clients(System.Collections.Generic.IList{System.String})">
      <summary>Devuelve una representación dinámica de las conexiones con los identificadores de conexión especificados.</summary>
      <returns>Una representación dinámica de los clientes especificados.</returns>
      <param name="connectionIds">Los identificadores de conexión.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Group(System.String,System.String[])">
      <summary>Devuelve una representación dinámica del grupo especificado.</summary>
      <returns>Una representación dinámica del grupo especificado.</returns>
      <param name="groupName">Nombre del grupo.</param>
      <param name="excludeConnectionIds">La lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Groups(System.Collections.Generic.IList{System.String},System.String[])">
      <summary>Devuelve una representación dinámica de los grupos especificados.</summary>
      <returns>Una representación dinámica de los grupos especificados.</returns>
      <param name="groupNames">Los nombres de los grupos.</param>
      <param name="excludeConnectionIds">La lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.HubName"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.Invoker"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor">
      <summary>Representa la información sobre un único concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.CreateQualifiedName(System.String)">
      <summary>Crea un nombre completo para el concentrador mediante el nombre incompleto especificado.</summary>
      <returns>El nombre completo creado.</returns>
      <param name="unqualifiedName">El nombre incompleto.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDescriptor.HubType">
      <summary>Obtiene o establece el tipo de concentrador.</summary>
      <returns>El tipo de concentrador.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher">
      <summary>Controla todas las comunicaciones sobre la conexión persistente del concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.#ctor(Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" />.</summary>
      <param name="configuration">Valores de configuración que determinan si deben habilitarse los servidores proxy de JS y proporcionan errores de concentrador detallados a los clientes.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.AuthorizeRequest(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Crea una lista de concentradores autorizados para la solicitud especificada de conexión.</summary>
      <returns>true si hay concentradores autorizados; de lo contrario, false.</returns>
      <param name="request">Solicitud para la conexión actual.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.GetSignals(System.String,System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Initialize(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Invocado por el host para inicializar la distribución del concentrador para el objeto IDependencyResolver.</summary>
      <param name="resolver">La resolución del objeto IDependency.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnConnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Se llama cuando la conexión se establece con esta instancia del concentrador.</summary>
      <returns>Tarea que se llama cuando la conexión se conecta a esta instancia de concentrador.</returns>
      <param name="request">El objeto IRequest para la conexión actual.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnDisconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Se llama cuando la conexión se desconecta de esta instancia del concentrador.</summary>
      <returns>Tarea que se llama cuando una conexión se desconecta de esta instancia de concentrador.</returns>
      <param name="request">El objeto IRequest para la conexión actual.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReceived(Microsoft.AspNet.SignalR.IRequest,System.String,System.String)">
      <summary>Procesa las llamadas de método entrantes del concentrador.</summary>
      <returns>Tarea que se llama cuando se reciben los datos de esta instancia de concentrador.</returns>
      <param name="request">El objeto IRequest para la conexión actual.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
      <param name="data">Los datos recibidos.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnReconnected(Microsoft.AspNet.SignalR.IRequest,System.String)">
      <summary>Se llama cuando la conexión se vuelve a establecer con esta instancia del concentrador.</summary>
      <returns>Tarea que se llama cuando la conexión se reconecta a esta instancia de concentrador.</returns>
      <param name="request">El objeto IRequest para la conexión actual.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.OnRejoiningGroups(Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.String)">
      <summary>Se llama cuando una conexión se reconecta después de un tiempo de espera agotado para determinar los grupos que se deben volver a unir.</summary>
      <returns>Lista de conexiones usadas después del tiempo de espera para determinar qué grupos deben volver a unirse.</returns>
      <param name="request">El objeto IRequest para la conexión actual.</param>
      <param name="groups">Los grupos a los que la conexión de llamada dice pertenecer.</param>
      <param name="connectionId">Identificador del cliente de reconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.ProcessRequest(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Controla todas las solicitudes para el objeto HostContext.</summary>
      <returns>Tarea que controla todas las solicitudes para HostContext.</returns>
      <param name="context">Contexto del host.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubDispatcher.Trace">
      <summary>Obtiene las conexiones del concentrador que habilitan las aplicaciones para el seguimiento de la ejecución del código y asociar mensajes de seguimiento con su origen.</summary>
      <returns>Las conexiones del concentrador que habilitan las aplicaciones para el seguimiento de la ejecución del código y asociar mensajes de seguimiento con su origen.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions">
      <summary>Proporciona una extensión del administrador del concentrador al proceso de concentrador completo.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.EnsureHub(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter[])">
      <summary>Garantiza toda la información sobre el descriptor del concentrador.</summary>
      <returns>El descriptor del concentrador para garantizar toda la información.</returns>
      <param name="hubManager">El administrador del concentrador.</param>
      <param name="hubName">Nombre del concentrador.</param>
      <param name="counters">Los contadores de rendimiento.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubMethods(Microsoft.AspNet.SignalR.Hubs.IHubManager,System.String)">
      <summary>Obtiene todos los métodos disponibles a los que se puede llamar en un concentrador dado.</summary>
      <returns>La colección de métodos que se deben llamar en un concentrador dado.</returns>
      <param name="hubManager">El administrador del concentrador.</param>
      <param name="hubName">Nombre del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions.GetHubs(Microsoft.AspNet.SignalR.Hubs.IHubManager)">
      <summary>Recupera todos los concentradores disponibles.</summary>
      <returns>La recuperación de todos los concentradores disponibles.</returns>
      <param name="hubManager">El administrador del concentrador.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute">
      <summary>Representa los atributos del nombre del método del concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute" />.</summary>
      <param name="methodName">El nombre del método.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute.MethodName">
      <summary>Obtiene o establece el nombre del método.</summary>
      <returns>El nombre del método.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute">
      <summary>Representa el atributo del nombre del concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute" />.</summary>
      <param name="hubName">El nombre del concentrador.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubNameAttribute.HubName">
      <summary>Obtiene o establece el nombre del concentrador.</summary>
      <returns>El nombre del concentrador.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule">
      <summary>Clase de base común para simplificar la implementación de IHubPipelineModules.Un módulo puede interceptar y personalizar las distintas etapas del procesamiento del concentrador, tal como la conexión, la reconexión, la desconexión, la invocación de métodos de concentrador de servidor, la invocación de métodos de concentrador de cliente, la autorización de clientes de concentrador y la nueva unión a grupos de concentradores.Un módulo se pueden activar al llamar al <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" />.Los módulos combinados que se agregan a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> se invocan a través de la interfaz del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>Ajusta una función que se debe llamar antes de que un cliente se suscriba a las señales que pertenecen al concentrador que describe el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.De manera predeterminada, el <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> buscará atributos en el <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> para ayudar a determinar si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador descrito.La función devuelve true si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador de cliente; de lo contrario, devuelve false.</summary>
      <returns>Una función ajustada que indica si el cliente está autorizado o no para conectarse al concentrador descrito.</returns>
      <param name="authorizeConnect">Una función que indica si el cliente está autorizado o no para conectarse al concentrador descrito.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Ajusta una función a la que se llama cuando un cliente se conecta al <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que se conecta el cliente.De manera predeterminada, esto resulta en la invocación del método OnConnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Una función ajustada a la que se debe llamar cuando un cliente se conecta a un concentrador.</returns>
      <param name="connect">Una función a la que se debe llamar cuando un cliente se conecta a un concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Ajusta una función a la que se llama cuando un cliente se desconecta del <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que estaba conectado el cliente.De manera predeterminada, esto resulta en la invocación del método OnDisconnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Una función ajustada a la que se debe llamar cuando un cliente se desconecta de un concentrador.</returns>
      <param name="disconnect">Una función a la que se debe llamar cuando un cliente se desconecta de un concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>Ajusta una función que invoca un método de concentrador de servidor.Incluso si un cliente no tiene autorización para conectarse a un concentrador, aún tendrá autorización para invocar métodos de servidor en dicho concentrador, a menos que se impida en <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> mediante la no ejecución del parámetro de invocación.</summary>
      <returns>Una función ajustada que invoca un método de concentrador de servidor.</returns>
      <param name="invoke">Una función que invoca un método de concentrador de servidor.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>Ajusta una función que invoca un método de concentrador de cliente.</summary>
      <returns>Una función ajustada que invoca un método de concentrador de cliente.</returns>
      <param name="send">Una función que invoca un método de concentrador de cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Ajusta una función a la que se llama cuando un cliente se vuelve a conectar al <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que se conecta el cliente.De manera predeterminada, esto resulta en la invocación del método OnReconnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Una función ajustada a la que se debe llamar cuando un cliente se vuelve a conectar a un concentrador.</returns>
      <param name="reconnect">Una función a la que se debe llamar cuando un cliente se vuelve a conectar a un concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>Ajusta una función que determina cuáles de los grupos que pertenecen al concentrador que describe el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> debería poder volver a unirse el cliente.De manera predeterminada, los clientes que se vuelven a conectar al servidor se quitarán de todos los grupos a los que pertenecían, ya que los clientes que no sean de confianza podrían indicar que pertenecen a grupos a los que nunca tenían autorización para unirse.</summary>
      <returns>Una función ajustada que determina a qué grupos un cliente puede volver a unirse.</returns>
      <param name="rejoiningGroups">Una función que determina a qué grupos un cliente puede volver a unirse.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Este método se llama después de la ejecución de los componentes de conexión de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> y después de la ejecución de <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" />, si es que se ejecuta.</summary>
      <param name="hub">El concentrador al que se conectó el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Este método se llama después de la ejecución de los componentes de desconexión de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> y después de la ejecución de <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" />, si es que se ejecuta.</summary>
      <param name="hub">El concentrador del que se desconectó el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterIncoming(System.Object,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Este método se llama después de que se haya completado la ejecución de los componentes entrantes de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> y del método de concentrador de servidor.</summary>
      <returns>El posible valor de devolución nuevo o actualizado del método de concentrador de servidor.</returns>
      <param name="result">El valor de devolución del método de concentrador de servidor.</param>
      <param name="context">Una descripción de una invocación de método de concentrador de servidor.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>Este método se llama después de la ejecución de los componentes salientes de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Esto no significa que todos los clientes han recibido la invocación de método de concentrador, pero sí indica que un mensaje de invocación de concentrador se ha publicado correctamente en un bus de mensajes.</summary>
      <param name="context">Una descripción de una invocación de método de concentrador de cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnAfterReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Este método se llama después de la ejecución de los componentes de reconexión de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> y después de la ejecución de <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" />, si es que se ejecuta.</summary>
      <param name="hub">El concentrador al que se volvió a conectar el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeAuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>Este método se llama antes de la ejecución de los componentes AuthorizeConnect de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si se devuelve false, los módulos agregados posteriormente no se ejecutarán y el cliente no podrá suscribirse a las invocaciones de cliente de los métodos que pertenecen al concentrador que define el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.</summary>
      <returns>true si el cliente tiene autorización para conectarse al concentrador; de lo contrario, false.</returns>
      <param name="hubDescriptor">Una descripción del concentrador al que intenta suscribirse el cliente.</param>
      <param name="request">La solicitud de conexión del cliente que intenta suscribirse al concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeConnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Este método se llama antes de la ejecución de los componentes de conexión de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si se devuelve false, los módulos agregados posteriormente y el método <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" /> no se ejecutarán.</summary>
      <returns>true si deben ejecutarse los componentes de conexión de los módulos agregados posteriormente y debe ejecutarse el método <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected" />; de lo contrario, false.</returns>
      <param name="hub">El concentrador al que se conectó el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeDisconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Este método se llama antes de la ejecución de los componentes de desconexión de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si se devuelve false, los módulos agregados posteriormente y el método <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" /> no se ejecutarán.</summary>
      <returns>true si deben ejecutarse los componentes de desconexión de los módulos agregados posteriormente y debe ejecutarse el método <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected" />; de lo contrario, false.</returns>
      <param name="hub">El concentrador del que se desconectó el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Este método se llama antes de la ejecución de los componentes entrantes de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si se devuelve false, los módulos agregados posteriormente y el método de invocación de concentrador de servidor no se ejecutarán.Incluso si un cliente no tiene autorización para conectarse a un concentrador, aún tendrá autorización para invocar métodos de servidor en dicho concentrador, a menos que se impida en <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> mediante la no ejecución del parámetro de invocación o se impida en <see cref="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeIncoming(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)" /> al devolver false.</summary>
      <returns>true si deben ejecutarse los componentes entrantes de los módulos agregados posteriormente y el método de invocación de concentrador de servidor; de lo contrario, false.</returns>
      <param name="context">Una descripción de una invocación de método de concentrador de servidor.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeOutgoing(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>Este método se llama antes de la ejecución de los componentes salientes de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si se devuelve false, los módulos agregados posteriormente y el método de invocación de concentrador de cliente no se ejecutarán.</summary>
      <returns>true si deben ejecutarse los componentes salientes de los módulos agregados posteriormente y el método de invocación de concentrador de cliente; de lo contrario, false.</returns>
      <param name="context">Una descripción de una invocación de método de concentrador de cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnBeforeReconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Este método se llama antes de la ejecución de los componentes de reconexión de los módulos que se agreguen posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" />.Si se devuelve false, los módulos agregados posteriormente y el método <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" /> no se ejecutarán.</summary>
      <returns>true si deben ejecutarse los componentes de reconexión de los módulos agregados posteriormente y debe ejecutarse el método <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected" />; de lo contrario, false.</returns>
      <param name="hub">El concentrador al que se volvió a conectar el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubPipelineModule.OnIncomingError(Microsoft.AspNet.SignalR.Hubs.ExceptionContext,Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Esto se llama cuando un método de concentrador de servidor o el componente entrante que se agregue posteriormente a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> lanza una excepción no detectada.La observación de la excepción mediante este método no impedirá su aparición en otros módulos.</summary>
      <param name="exceptionContext">Representa la excepción lanzada durante la invocación de servidor.Es posible cambiar el error o establecer un resultado mediante este contexto.</param>
      <param name="invokerContext">Una descripción de una invocación de método de concentrador de servidor.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubRequest">
      <summary>Proporciona los métodos que se comunican con una solicitud de conexión SignalR que se conectó al concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubRequest.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Hub">
      <summary>Obtiene o establece el valor de conexión de un concentrador.</summary>
      <returns>El valor de conexión de un concentrador.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Id">
      <summary>Obtiene o establece el identificador de conexión.</summary>
      <returns>Identificador de conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.Method">
      <summary>Obtiene o establece el método de solicitud.</summary>
      <returns>El método de solicitud.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.ParameterValues">
      <summary>Obtiene o establece los valores de parámetro.</summary>
      <returns>Los valores de parámetro.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubRequest.State">
      <summary>Obtiene o establece el estado actual de la solicitud.</summary>
      <returns>El estado actual de la solicitud.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.HubResponse">
      <summary>Representa la respuesta que se devuelve de una solicitud de concentrador entrante.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.HubResponse.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubResponse" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Error">
      <summary>Obtiene o establece la excepción que se produce como resultado de invocar el método de concentrador.</summary>
      <returns>La excepción que se produce como resultado de invocar el método de concentrador.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.ErrorData">
      <summary>Datos de error adicionales incluidos en el objeto <see cref="T:Microsoft.AspNet.SignalR.HubException" /></summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Id">
      <summary>Obtiene o establece el identificador de la operación.</summary>
      <returns>El identificador de la operación.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.IsHubException">
      <summary>Indica si el error es un objeto <see cref="T:Microsoft.AspNet.SignalR.HubException" /> de visualización.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.Result">
      <summary>Obtiene o establece el resultado de la invocación.</summary>
      <returns>El resultado de la invocación.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.StackTrace">
      <summary>Obtiene o establece el seguimiento de pila de la excepción que se produce como resultado de invocar el método de concentrador.</summary>
      <returns>El seguimiento de pila de la excepción que se produce como resultado de invocar el método de concentrador.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.HubResponse.State">
      <summary>Obtiene o establece los cambios realizados al estado de ida y vuelta.</summary>
      <returns>Los cambios que se realizan al estado de viaje de ida y vuelta.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator">
      <summary>Localiza un ensamblado y devuelve información sobre sus módulos.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator.GetAssemblies">
      <summary>Devuelve una lista de ensamblados a los que el módulo hace referencia.</summary>
      <returns>Una lista de ensamblados a los que el módulo hace referencia.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection">
      <summary>Interfaz que debe implementar el <see cref="T:System.Attribute" /> que puede autorizar a un cliente a que se conecte a un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection.AuthorizeHubConnection(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>Dado un <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" />, determine si el cliente tiene autorización para conectarse al <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Es true si el responsable de la llamada tiene autorización para conectarse al concentrador; de lo contrario, es false.</returns>
      <param name="hubDescriptor">Descripción del concentrador al que intenta conectarse el cliente.</param>
      <param name="request">La solicitud de conexión del cliente.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation">
      <summary>Interfaz que debe implementar el <see cref="T:System.Attribute" /> que puede autorizar la invocación de métodos <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation.AuthorizeHubMethodInvocation(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Boolean)">
      <summary>Dado un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" />, determine si el cliente tiene autorización para invocar el <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Es true si el responsable de la llamada tiene autorización invocar el método <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />; de lo contrario, es false.</returns>
      <param name="hubIncomingInvokerContext">Un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext" /> que proporciona detalles acerca de la invocación del método <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</param>
      <param name="appliesToMethod">Indica si la instancia de interfaz es un atributo que se aplica directamente a un método.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy">
      <summary>Un proxy de servidor para un concentrador de cliente.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IClientProxy.Invoke(System.String,System.Object[])">
      <summary>Invoca un método en las conexiones representadas por la instancia de <see cref="T:Microsoft.AspNet.SignalR.Hubs.IClientProxy" />.</summary>
      <returns>Tarea que representa cuándo se han enviado datos al cliente.</returns>
      <param name="method">El nombre del método que se debe invocar.</param>
      <param name="args">Los argumentos que se deben pasar al cliente.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHub">
      <summary>Proporciona una interfaz que representa los métodos que se comunican con conexiones SignalR que se conectaron a un concentrador.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
      <summary>Obtiene o establece los clientes que se están conectando al concentrador.</summary>
      <returns>Los clientes que se están conectando al concentrador.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
      <summary>Obtiene o establece la información acerca del cliente que llama.</summary>
      <returns>Información acerca del cliente que llama.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
      <summary>Obtiene o establece el administrador de grupos para la instancia de este concentrador.</summary>
      <returns>El administrador de grupos para esta instancia del concentrador.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected">
      <summary>Se llama cuando la conexión se establece con esta instancia del concentrador.</summary>
      <returns>El objeto de tarea que representa la operación de conexión.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected">
      <summary>Se llama cuando la conexión se desconecta de esta instancia del concentrador.</summary>
      <returns>El objeto de tarea que representa la operación de desconexión.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected">
      <summary>Se llama cuando la conexión se vuelve a establecer con esta instancia del concentrador.</summary>
      <returns>El objeto de tarea que representa la operación de reconexión.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubActivator">
      <summary>Proporciona un método para crear la instancia de concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubActivator.Create(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Crea una nueva instancia de concentrador.</summary>
      <returns>El concentrador recién creado.</returns>
      <param name="descriptor">El descriptor del concentrador.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext">
      <summary>Encapsula toda la información acerca de una conexión SignalR individual para un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Caller"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.Others"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroup(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext.OthersInGroups(System.Collections.Generic.IList{System.String})"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext">
      <summary>Encapsula toda la información acerca de una conexión SignalR para un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.All">
      <summary>Obtiene o establece todos los clientes conectados.</summary>
      <returns>Todos los clientes conectados.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.AllExcept(System.String[])">
      <summary>Devuelve una representación dinámica de todos los clientes, excepto los clientes que llaman especificados.</summary>
      <returns>Una representación dinámica de todos los clientes, excepto los clientes que llaman especificados.</returns>
      <param name="excludeConnectionIds">Una lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Client(System.String)">
      <summary>Devuelve una representación dinámica de la conexión con el identificador de conexión especificado.</summary>
      <returns>Una representación dinámica del cliente especificado.</returns>
      <param name="connectionId">El identificador de conexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Clients(System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Group(System.String,System.String[])">
      <summary>Devuelve una representación dinámica del grupo especificado.</summary>
      <returns>Una representación dinámica del grupo especificado.</returns>
      <param name="groupName">Nombre del grupo.</param>
      <param name="excludeConnectionIds">Una lista de identificadores de conexión que se deben excluir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.Groups(System.Collections.Generic.IList{System.String},System.String[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext.User(System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider">
      <summary>Describe el proveedor de descriptor del concentrador, que proporciona información sobre los concentradores disponibles.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.GetHubs">
      <summary>Recupera todos los concentradores disponibles.</summary>
      <returns>Colección de descriptores de concentrador.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>Intenta recuperar el concentrador con un nombre dado.</summary>
      <returns>Es true, si se encuentra el concentrador.</returns>
      <param name="hubName">Nombre del concentrador.</param>
      <param name="descriptor">Objeto de descriptor recuperado.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext">
      <summary>Una descripción de una invocación de método de concentrador de servidor que origina en un cliente.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Args">
      <summary>Obtiene los argumentos que se deben pasar al método invocado.</summary>
      <returns>Los argumentos que se deben pasar al método invocado.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.Hub">
      <summary>Obtiene una instancia de concentrador que contiene el método invocado como miembro.</summary>
      <returns>Una instancia de concentrador que contiene el método invocado como miembro.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.MethodDescriptor">
      <summary>Obtiene una descripción del método que invoca el cliente.</summary>
      <returns>Una descripción del método que invoca el cliente.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext.StateTracker">
      <summary>Obtiene un almacén de valores clave que representa el estado del concentrador en el cliente en el momento de la invocación.</summary>
      <returns>Un almacén de valores clave que representa el estado del concentrador en el cliente en el momento de la invocación.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubManager">
      <summary>Describe el administrador de concentradores: punto principal de todo el concentrador y proceso de búsqueda del método.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHub(System.String)">
      <summary>Recupera un único descriptor de concentrador.</summary>
      <returns>El descriptor del concentrador, si se encuentra.De lo contrario, es nulo.</returns>
      <param name="hubName">El nombre del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethod(System.String,System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Recupera un método con un nombre dado de un concentrador concreto.</summary>
      <returns>El descriptor del método, si se encuentra.De lo contrario, es nulo.</returns>
      <param name="hubName">El nombre del concentrador.</param>
      <param name="method">El nombre del método que se debe buscar.</param>
      <param name="parameters">Los parámetros del método que deben coincidir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubMethods(System.String,System.Func{Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Boolean})">
      <summary>Obtiene todos los métodos disponibles a los que se puede llamar en un concentrador dado.</summary>
      <returns>La lista de métodos disponibles.</returns>
      <param name="hubName">El nombre del concentrador.</param>
      <param name="predicate">El predicado opcional para filtrar los resultados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.GetHubs(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.Boolean})">
      <summary>Recupera todos los concentradores disponibles que coinciden con el predicado dado.</summary>
      <returns>La lista de descriptores del concentrador.</returns>
      <param name="predicate">El predicado.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHub(System.String)">
      <summary>Resuelve un nombre de concentrador dado en un objeto concreto.</summary>
      <returns>La instancia de implementación del concentrador, si se encuentra.De lo contrario, es nulo.</returns>
      <param name="hubName">El nombre del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubManager.ResolveHubs">
      <summary>Resuelve todos los concentradores disponibles en sus objetos concretos.</summary>
      <returns>La lista de instancias del concentrador.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext">
      <summary>Una descripción de una invocación de método de concentrador de cliente que origina en un servidor.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Connection">
      <summary>Obtiene el objeto <see cref="T:Microsoft.AspNet.SignalR.IConnection" />, si lo hay, que corresponde al cliente que invocó el método de concentrador de servidor que invoca el método de concentrador de cliente.</summary>
      <returns>La <see cref="T:Microsoft.AspNet.SignalR.IConnection" />, si la hay, que corresponde al cliente que invocó el método de concentrador de servidor que invoca el método de concentrador de cliente.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.ExcludedSignals">
      <summary>Obtiene las señales (ConnectionId, nombre de tipo de concentrador o nombre de tipo de concentrador + "." + nombre de grupo) que pertenecen a los clientes que no deben recibir la invocación del método, independientemente del valor de <see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" />.</summary>
      <returns>Las señales (ConnectionId, nombre de tipo de concentrador o nombre de tipo de concentrador + "." + nombre de grupo) que pertenecen a los clientes que no deben recibir la invocación del método, independientemente del valor de <see cref="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Invocation">
      <summary>Obtiene descripción de la llamada al método que se debe realizar en el cliente.</summary>
      <returns>Una descripción de la llamada al método que se debe realizar en el cliente.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signal">
      <summary>Obtiene la señale (ConnectionId, nombre de tipo de concentrador o nombre de tipo de concentrador + "." + nombre de grupo) que pertenece a los clientes que reciben la invocación del método.</summary>
      <returns>La señal (ConnectionId, nombre de tipo de concentrador o nombre de tipo de concentrador + "." + nombre de grupo) que pertenece a los clientes que reciben la invocación del método.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext.Signals">
      <summary>Las señales (ConnectionId, nombre de tipo de concentrador o nombre de tipo de concentrador + "." + nombre de grupo) que pertenece a los clientes que reciben la invocación del método.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline">
      <summary>Una colección de módulos que pueden interceptar y personalizar las distintas etapas del procesamiento del concentrador, tal como la conexión, la reconexión, la desconexión, la invocación de métodos de concentrador de servidor, la invocación de métodos de concentrador de cliente, la autorización de clientes de concentrador y la nueva unión a grupos de concentradores.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)">
      <summary>Agrega un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> a la canalización de concentrador.Los módulos que se agregan a la canalización en primer lugar ajustarán los módulos que se agregan posteriormente a la canalización.Todos los módulos deben agregarse a la canalización antes de que invoquen los métodos en el <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" />.</summary>
      <returns>La <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> en sí con el módulo recién agregado que permite encadenar las llamadas a <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" />.Este método modifica la canalización en la que se invoca, por lo que no es necesario almacenar su resultado.</returns>
      <param name="pipelineModule">Un módulo que puede interceptar y personalizar las distintas etapas del procesamiento del concentrador, tal como la conexión, la reconexión, la desconexión, la invocación de métodos de concentrador de servidor, la invocación de métodos de concentrador de cliente, la autorización de clientes de concentrador y la nueva unión a grupos de concentradores.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker">
      <summary>Las implementaciones de esta interfaz son responsables de ejecutar la operación necesaria para completar las distintas etapas del procesamiento del concentrador, tal como la conexión, la reconexión, la desconexión, la invocación de métodos de concentrador de servidor, la invocación de métodos de concentrador de cliente, la autorización de clientes de concentrador y la nueva unión a grupos de concentradores.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.AuthorizeConnect(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest)">
      <summary>Se debe llamar antes de que un cliente se suscriba a las señales que pertenecen al concentrador que describe el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.De manera predeterminada, el <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> buscará atributos en el <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> para ayudar a determinar si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador descrito.</summary>
      <returns>Es true si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador de cliente; de lo contrario, es false.</returns>
      <param name="hubDescriptor">Una descripción del concentrador al que intenta conectarse el cliente.</param>
      <param name="request">La solicitud de conexión que realiza el cliente que debe incluir el usuario <see cref="T:System.Security.Principal.IPrincipal" /> del cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Connect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Se llama cuando un cliente se conecta al <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que se conecta el cliente.De manera predeterminada, esto resulta en la invocación del método OnConnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="hub">Un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que está conectado el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Disconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Se llama cuando un cliente se desconecta del <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que estaba conectado el cliente.De manera predeterminada, esto resulta en la invocación del método OnDisconnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="hub">Un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> del que se desconectó el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Invoke(Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext)">
      <summary>Invoca un método de concentrador de servidor.</summary>
      <returns>Una operación asíncrona que proporciona el valor de devolución de la invocación de método de concentrador de servidor.</returns>
      <param name="context">Una descripción de una invocación de método de concentrador de servidor.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Reconnect(Microsoft.AspNet.SignalR.Hubs.IHub)">
      <summary>Se llama cuando un cliente se vuelve a conectar al <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que se conecta el cliente.De manera predeterminada, esto resulta en la invocación del método OnReconnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="hub">Un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que se vuelve a conectar el cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.RejoiningGroups(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String})">
      <summary>Este método determina cuáles de los grupos que pertenecen al concentrador que describe el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> debería poder volver a unirse el cliente.De manera predeterminada, los clientes que se vuelven a conectar al servidor se quitarán de todos los grupos a los que pertenecían, ya que los clientes que no sean de confianza podrían indicar que pertenecen a grupos a los que nunca tenían autorización para unirse.</summary>
      <returns>Una lista de grupos a los que el cliente puede volver a unirse.</returns>
      <param name="hubDescriptor">Una descripción del concentrador al que el cliente intenta volver a unirse.</param>
      <param name="request">La solicitud de reconexión que realiza el cliente que intenta volver a unirse a los grupos.</param>
      <param name="groups">La lista de grupos que pertenecen al concentrador pertinente a los que el cliente dice haber pertenecido antes de la nueva conexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker.Send(Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext)">
      <summary>Invoca un método de concentrador de cliente.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="context">Una descripción de una invocación de método de concentrador de cliente.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule">
      <summary>Un <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule" /> puede interceptar y personalizar las distintas etapas del procesamiento del concentrador, tal como la conexión, la reconexión, la desconexión, la invocación de métodos de concentrador de servidor, la invocación de métodos de concentrador de cliente, la autorización de clientes de concentrador y la nueva unión a grupos de concentradores.Los módulos se pueden activar al llamar al <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipeline.AddModule(Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule)" />.Los módulos combinados que se agregan a la <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipeline" /> se invocan a través de la interfaz del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildAuthorizeConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Boolean})">
      <summary>Ajusta una función que se debe llamar antes de que un cliente se suscriba a las señales que pertenecen al concentrador que describe el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" />.De manera predeterminada, el <see cref="T:Microsoft.AspNet.SignalR.Hubs.AuthorizeModule" /> buscará atributos en el <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> para ayudar a determinar si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador descrito.La función devuelve true si el cliente está autorizado para suscribirse a las invocaciones de método del concentrador de cliente; de lo contrario, devuelve false.</summary>
      <returns>Una función ajustada que indica si el cliente está autorizado o no para conectarse al concentrador descrito.</returns>
      <param name="authorizeConnect">Una función que indica si el cliente está autorizado o no para conectarse al concentrador descrito.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildConnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Ajusta una función a la que se llama cuando un cliente se conecta al <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que se conecta el cliente.De manera predeterminada, esto resulta en la invocación del método OnConnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Una función ajustada a la que se debe llamar cuando un cliente se conecta a un concentrador.</returns>
      <param name="connect">Una función a la que se debe llamar cuando un cliente se conecta a un concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildDisconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Ajusta una función a la que se llama cuando un cliente se desconecta del <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que estaba conectado el cliente.De manera predeterminada, esto resulta en la invocación del método OnDisconnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Una función ajustada a la que se debe llamar cuando un cliente se desconecta de un concentrador.</returns>
      <param name="disconnect">Una función a la que se debe llamar cuando un cliente se desconecta de un concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})">
      <summary>Ajusta una función que invoca un método de concentrador de servidor.Incluso si un cliente no tiene autorización para conectarse a un concentrador, aún tendrá autorización para invocar métodos de servidor en dicho concentrador, a menos que se impida en <see cref="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildIncoming(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext,System.Threading.Tasks.Task{System.Object}})" /> mediante la no ejecución del parámetro de invocación.</summary>
      <returns>Una función ajustada que invoca un método de concentrador de servidor.</returns>
      <param name="invoke">Una función que invoca un método de concentrador de servidor.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildOutgoing(System.Func{Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext,System.Threading.Tasks.Task})">
      <summary>Ajusta una función que invoca un método de concentrador de cliente.</summary>
      <returns>Una función ajustada que invoca un método de concentrador de cliente.</returns>
      <param name="send">Una función que invoca un método de concentrador de cliente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildReconnect(System.Func{Microsoft.AspNet.SignalR.Hubs.IHub,System.Threading.Tasks.Task})">
      <summary>Ajusta una función a la que se llama cuando un cliente se vuelve a conectar al <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" /> para cada <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" /> al que se conecta el cliente.De manera predeterminada, esto resulta en la invocación del método OnReconnected del <see cref="T:Microsoft.AspNet.SignalR.Hubs.IHub" />.</summary>
      <returns>Una función ajustada a la que se debe llamar cuando un cliente se vuelve a conectar a un concentrador.</returns>
      <param name="reconnect">Una función a la que se debe llamar cuando un cliente se vuelve a conectar a un concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule.BuildRejoiningGroups(System.Func{Microsoft.AspNet.SignalR.Hubs.HubDescriptor,Microsoft.AspNet.SignalR.IRequest,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String}})">
      <summary>Ajusta una función que determina cuáles de los grupos que pertenecen al concentrador que describe el <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDescriptor" /> debería poder volver a unirse el cliente.De manera predeterminada, los clientes que se vuelven a conectar al servidor se quitarán de todos los grupos a los que pertenecían, ya que los clientes que no sean de confianza podrían indicar que pertenecen a grupos a los que nunca tenían autorización para unirse.</summary>
      <returns>Una función ajustada que determina a qué grupos un cliente puede volver a unirse.</returns>
      <param name="rejoiningGroups">Una función que determina a qué grupos un cliente puede volver a unirse.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser">
      <summary>Controla las solicitudes entrantes de análisis a través del <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubDispatcher" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IHubRequestParser.Parse(System.String,Newtonsoft.Json.JsonSerializer)">
      <summary>Analiza la carga de concentrador entrante en una <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" />.</summary>
      <returns>La <see cref="T:Microsoft.AspNet.SignalR.Hubs.HubRequest" /> resultante.</returns>
      <param name="data">La carga de concentrador sin formato.</param>
      <param name="serializer">El objeto JsonSerializer que se usa para analizar los datos.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier">
      <summary>Combina, minifica y almacena en caché el código JavaScript del concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier.Minify(System.String)">
      <summary>Minifica el origen especificado del objeto <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" />.</summary>
      <returns>El origen especificado del objeto <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier" />.</returns>
      <param name="source">El origen minificado.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator">
      <summary>Genera el servicio de proxy para la interfaz de JavaScript.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator.GenerateProxy(System.String)">
      <summary>Genera un servidor proxy para la dirección URL del objeto <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" />.</summary>
      <returns>Un servidor proxy para generar la dirección URL para el objeto <see cref="T:Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator" />.</returns>
      <param name="serviceUrl">La dirección URL de servicio.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider">
      <summary>Describe un proveedor de métodos de concentrador que crea una colección de métodos disponibles en un concentrador dado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Recupera todos los métodos en un concentrador dado.</summary>
      <returns>Métodos disponibles.</returns>
      <param name="hub">Objeto de descriptor del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Intenta recuperar un método.</summary>
      <returns>Es true, si se encuentra un método.</returns>
      <param name="hub">Objeto de descriptor del concentrador.</param>
      <param name="method">Nombre del método.</param>
      <param name="descriptor">Descriptor del método, si se encuentra.De lo contrario, es nulo.</param>
      <param name="parameters">Los parámetros del método que deben coincidir.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.IParameterResolver">
      <summary>Describe una resolución de parámetros para resolver los valores de coincidencia de parámetros en función de la información proporcionada.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.IParameterResolver.ResolveMethodParameters(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Resuelve los valores de parámetro del método en función de los objetos proporcionados.</summary>
      <returns>Matriz de valores de parámetro.</returns>
      <param name="method">El descriptor del método.</param>
      <param name="values">Lista de valores desde los que se deben resolver los valores de parámetro.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor">
      <summary>Representa la información sobre un único método de concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Attributes">
      <summary>Obtiene o establece los atributos adjuntos a este método.</summary>
      <returns>Los atributos adjuntos a este método.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Hub">
      <summary>Obtiene el destino del objeto del descriptor del concentrador a este método.</summary>
      <returns>El destino del objeto del descriptor del concentrador a este método.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Invoker">
      <summary>Obtiene o establece el delegado de invocación del método.Acepta como argumentos un concentrador de destino y una matriz de argumentos de invocación.</summary>
      <returns>El delegado de invocación del método.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.Parameters">
      <summary>Los parámetros de método disponibles.</summary>
      <returns>Los parámetros del método disponibles.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor.ReturnType">
      <summary>Obtiene o establece el tipo de devolución de este método.</summary>
      <returns>El tipo de devolución para este método.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MethodExtensions">
      <summary>Representa la extensión de los métodos para los concentradores SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MethodExtensions.Matches(Microsoft.AspNet.SignalR.Hubs.MethodDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Especifica si una extensión del método coincide con otro descriptor del método.</summary>
      <returns>true si una extensión de método coincide con otro descriptor de método; de lo contrario false.</returns>
      <param name="methodDescriptor">El descriptor del método.</param>
      <param name="parameters">La lista de parámetros.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.Collections.Generic.IList{System.String},System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.GetInvocationData(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.Invoke(System.String,System.Object[])"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException">
      <summary>Representa una excepción que se lanza cuando un cliente no tiene autorización para conectarse a un concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> con los datos serializados.</summary>
      <param name="info">La información serializada acerca de la excepción.</param>
      <param name="context">La información contextual acerca del origen o el destino.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> con el mensaje de error.</summary>
      <param name="message">El mensaje sobre la excepción.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException" /> con el mensaje de error y la excepción interior.</summary>
      <param name="message">El mensaje sobre la excepción.</param>
      <param name="inner">El error que provocó la excepción.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier">
      <summary>Representa un minificador para JavaScript null.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Instance">
      <summary>Especifica la instancia de <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier.Minify(System.String)">
      <summary>Minifica el origen especificado del objeto JavaScript.</summary>
      <returns>El origen minificado.</returns>
      <param name="source">Origen que se va a minificar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor">
      <summary>Provides details about the null method.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor" /> class.</summary>
      <param name="methodName">The name for this null method.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Attributes">
      <summary>Gets or sets the attributes attached to this method.</summary>
      <returns>The attributes attached to this method.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Invoker">
      <summary>Gets or sets the method invocation delegate. Takes a target hub and an array of invocation arguments as it's arguments.</summary>
      <returns>The method invocation delegate.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor.Parameters">
      <summary>Gets or sets the available method parameters.</summary>
      <returns>The available method parameters.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor">
      <summary>Representa la información sobre un único parámetro de método de concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.Name">
      <summary>Obtiene o establece el nombre del parámetro.</summary>
      <returns>El nombre del parámetro.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor.ParameterType">
      <summary>Obtiene o establece el tipo de parámetro.</summary>
      <returns>El tipo de parámetro.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider">
      <summary>Describe el proveedor del descriptor del concentrador y proporciona la información reflejada sobre los concentradores disponibles.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider" />.</summary>
      <param name="resolver">La <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.BuildHubsCache">
      <summary>Recupera una colección de conexiones para crear la memoria caché del concentrador.</summary>
      <returns>Una colección de conexiones para crear la memoria caché del concentrador.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.GetHubs">
      <summary>Recupera todos los concentradores disponibles. </summary>
      <returns>La colección de concentradores disponibles.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider.TryGetHub(System.String,Microsoft.AspNet.SignalR.Hubs.HubDescriptor@)">
      <summary>Intenta recuperar el concentrador con un nombre dado.</summary>
      <returns>true si el concentrador se ha encontrado; de lo contrario,false.</returns>
      <param name="hubName">El nombre del concentrador que se va a recuperar.</param>
      <param name="descriptor">Cuando vuelve este método, contiene el objeto de descriptor recuperado.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider">
      <summary>Representa el método reflejado para el proveedor del descriptor.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.GetMethods(Microsoft.AspNet.SignalR.Hubs.HubDescriptor)">
      <summary>Devuelve una colección de métodos del proveedor.</summary>
      <returns>Una colección de métodos del proveedor.</returns>
      <param name="hub">El descriptor del concentrador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider.TryGetMethod(Microsoft.AspNet.SignalR.Hubs.HubDescriptor,System.String,Microsoft.AspNet.SignalR.Hubs.MethodDescriptor@,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Json.IJsonValue})">
      <summary>Busca en el <paramref name="hub" /> especificado el <paramref name="method" /> especificado.</summary>
      <returns>true si el método que coincide con el conjunto de parámetros o nombres se encuentra en el concentrador. De lo contrario, false.</returns>
      <param name="hub">Concentrador en que se busca el <paramref name="method" /> especificado.</param>
      <param name="method">El nombre del método que se busca.</param>
      <param name="descriptor">Si es correcto, el <see cref="T:Microsoft.AspNet.SignalR.Hubs.MethodDescriptor" /> que se resolvió.</param>
      <param name="parameters">El conjunto de parámetros que se usará para ayudar a ubicar una sobrecarga específica del <paramref name="method" /> específico.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper">
      <summary>Representa la aplicación auxiliar de reflejo.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetAttributeValue``2(System.Reflection.ICustomAttributeProvider,System.Func{``0,``1})">
      <summary>Obtiene el valor de atributo para esta aplicación auxiliar.</summary>
      <returns>El valor de atributo para esta aplicación auxiliar.</returns>
      <param name="source">El origen en el que se obtiene el valor.</param>
      <param name="valueGetter">El elemento que obtiene el valor.</param>
      <typeparam name="TAttribute">Tipo del atributo.</typeparam>
      <typeparam name="TResult">Tipo de resultado.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.ReflectionHelper.GetExportedHubMethods(System.Type)">
      <summary>Obtiene una lista de los métodos del concentrador exportado.</summary>
      <returns>Una lista de los métodos del concentrador exportado.</returns>
      <param name="type">El tipo de los métodos que se va a obtener.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy">
      <summary>Representa el servidor proxy de señal que usa el concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,System.Collections.Generic.IList{System.String})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Connection"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>Obtiene los datos de invocación del concentrador cliente asociados con el servidor proxy.</summary>
      <returns>Los datos de invocación del concentrador cliente asociados con el servidor proxy.</returns>
      <param name="method">El método.</param>
      <param name="args">Argumentos.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.HubName">
      <summary>Obtiene o establece el nombre del concentrador.</summary>
      <returns>El nombre del concentrador.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoke(System.String,System.Object[])">
      <summary>Invoca un método y devuelve los resultados de la llamada al método.</summary>
      <returns>El resultado de la operación.</returns>
      <param name="method">El método que se debe invocar.</param>
      <param name="args">La matriz del argumento.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Invoker"></member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.SignalProxy.Signal">
      <summary>Obtiene o establece las señales asociadas con el objeto <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" />.</summary>
      <returns>La señal asociada con el objeto <see cref="T:Microsoft.AspNet.SignalR.Hubs.SignalProxy" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Proporciona la implementación para las operaciones que obtienen valores del miembro.</summary>
      <returns>true si la operación se lleva a cabo correctamente; en caso contrario, false.</returns>
      <param name="binder">La información sobre el objeto que llamó a la operación dinámica.</param>
      <param name="result">El resultado de la operación get.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.SignalProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Proporciona la implementación para las operaciones que invocan un miembro.</summary>
      <returns>true si la operación se lleva a cabo correctamente; en caso contrario, false.</returns>
      <param name="binder">Proporciona información sobre la operación dinámica.</param>
      <param name="args">Los argumentos que se pasan al miembro de objeto durante la operación de invocación.</param>
      <param name="result">El resultado de la invocación del miembro.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker">
      <summary>Representa un diccionario de control de cambios.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker" />.</summary>
      <param name="values">El valor del diccionario.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.GetChanges">
      <summary>Obtiene los cambios asociados con el control.</summary>
      <returns>Los cambios asociados con el control.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Hubs.StateChangeTracker.Item(System.String)">
      <summary>Obtiene o establece el elemento asociado con el control mediante una clave especificada.</summary>
      <returns>El elemento asociado con el control mediante una clave especificada.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy">
      <summary>Representa el servidor proxy de señal con estado que usa el concentrador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String,System.String,Microsoft.AspNet.SignalR.Hubs.StateChangeTracker)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.GetInvocationData(System.String,System.Object[])">
      <summary>Obtiene los datos de invocación del concentrador cliente asociados con el servidor proxy.</summary>
      <returns>Los datos de invocación del concentrador cliente asociados con el servidor proxy.</returns>
      <param name="method">El método.</param>
      <param name="args">Argumentos.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Proporciona la implementación para las operaciones que obtienen valores del miembro.</summary>
      <returns>true si la operación se lleva a cabo correctamente; en caso contrario, false.</returns>
      <param name="binder">La información sobre el objeto que llamó a la operación dinámica.</param>
      <param name="result">El resultado de la operación get.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Proporciona la implementación para las operaciones que establece los valores del miembro.</summary>
      <returns>true si la operación se lleva a cabo correctamente; en caso contrario, false.</returns>
      <param name="binder">La información sobre el objeto que llamó a la operación dinámica.</param>
      <param name="value">El resultado de la operación set.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Hubs.UserProxy"></member>
    <member name="M:Microsoft.AspNet.SignalR.Hubs.UserProxy.#ctor(Microsoft.AspNet.SignalR.IConnection,Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler">
      <summary>Representa una instancia que controla el kit para la certificación de aplicaciones (ACK).</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.#ctor(System.Boolean,System.TimeSpan,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" />.</summary>
      <param name="completeAcksOnTimeout">true si ACK se han completado en el tiempo de espera; de lo contrario, false.</param>
      <param name="ackThreshold">El umbral de ACK.</param>
      <param name="ackInterval">El intervalo de ACK.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.CreateAck(System.String)">
      <summary>Crea un objeto ACK.</summary>
      <returns>El objeto ACK creado.</returns>
      <param name="id">El identificador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.AckHandler" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.Dispose(System.Boolean)">
      <summary>Libera todos los recursos utilizados por esta instancia.</summary>
      <param name="disposing">true para liberar los recursos administrados y los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.AckHandler.TriggerAck(System.String)">
      <summary>Desencadena un objeto ACK especificado.</summary>
      <returns>El resultado de la operación.</returns>
      <param name="id">El identificador ACK.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader">
      <summary>Representa el lector de texto asociado con el segmento de la matriz.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.#ctor(System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader" />.</summary>
      <param name="buffer">El búfer de segmento de la matriz.</param>
      <param name="encoding">La codificación.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un número máximo especificado de caracteres del lector actual y escribe los datos en un búfer, a partir el índice especificado.</summary>
      <returns>El número máximo de caracteres que se han leído.</returns>
      <param name="buffer">Contiene la matriz de caracteres especificada con los valores entre el índice y que se reemplazan por los caracteres que se leen desde el origen actual.</param>
      <param name="index">La posición en el búfer en el que se debe iniciar la escritura.</param>
      <param name="count">El número máximo de caracteres que se deben leer.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Connection">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.#ctor(Microsoft.AspNet.SignalR.Messaging.IMessageBus,Newtonsoft.Json.JsonSerializer,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IAckHandler,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Infrastructure.IProtectedData)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.Connection" />.</summary>
      <param name="newMessageBus">Nuevo bus de mensajes.</param>
      <param name="jsonSerializer">Serializador JSON.</param>
      <param name="baseSignal">Señal base.</param>
      <param name="connectionId">Identificador de conexión.</param>
      <param name="signals">Colección de señales.</param>
      <param name="groups">Colección de grupos.</param>
      <param name="traceManager">Administrador de seguimiento.</param>
      <param name="ackHandler">Controlador ACK.</param>
      <param name="performanceCounterManager">Administrador de contadores de rendimiento.</param>
      <param name="protectedData">Datos protegidos.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.DefaultSignal">
      <summary>Obtiene la señal principal para esta conexión.</summary>
      <returns>La señal principal para esta conexión.</returns>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyAdded">
      <summary>Tiene lugar cuando el evento agrega una clave.</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Infrastructure.Connection.EventKeyRemoved">
      <summary>Tiene lugar cuando el evento quita la clave.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Identity">
      <summary>Obtiene una propiedad de identidad para esta conexión.</summary>
      <returns>Propiedad de identidad para esta conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Microsoft#AspNet#SignalR#Messaging#ISubscriber#EventKeys">
      <summary>Obtiene una lista de objetos a los que se puede obtener acceso individualmente por el índice.</summary>
      <returns>Lista de objetos a los que se puede obtener acceso individualmente por el índice.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Recibe una respuesta de mensaje al método de conexión.</summary>
      <returns>Respuesta de mensaje al método de conexión que se va a recibir.</returns>
      <param name="messageId">Identificador del mensaje.</param>
      <param name="callback">Determina si la conexión emite una respuesta de devolución de llamada.</param>
      <param name="maxMessages">Número máximo de mensajes.</param>
      <param name="state">Estado de conexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.Connection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)">
      <summary>Envía un mensaje a una o más conexiones.</summary>
      <returns>Un mensaje enviado a una o más conexiones.</returns>
      <param name="message">Mensaje enviado a las conexiones.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.Subscription">
      <summary>Obtiene o establece una suscripción para esta propiedad de conexión.</summary>
      <returns>Suscripción para esta propiedad de conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.Connection.WriteCursor">
      <summary>Obtiene o establece el cursor para escribir una serie secuencial de caracteres.</summary>
      <returns>Cursor para escribir una serie secuencial de caracteres.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager">
      <summary>Proporciona una implementación del objeto <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager" /> predeterminado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager" />.</summary>
      <param name="resolver">La <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnection(System.Type)">
      <summary>Devuelve un <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>El <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <param name="type">El tipo del objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetConnectionContext``1">
      <summary>Devuelve un <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>El <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <typeparam name="T">El tipo del objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext``1">
      <summary>Devuelve el contexto del concentrador para esta conexión.</summary>
      <returns>El contexto del concentrador para esta conexión.</returns>
      <typeparam name="T">El tipo del concentrador.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager.GetHubContext(System.String)">
      <summary>Devuelve el contexto del concentrador para esta conexión dado el nombre especificado.</summary>
      <returns>El contexto del concentrador para esta conexión.</returns>
      <param name="hubName">El nombre del concentrador.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData">
      <summary>Proporciona métodos para proteger los datos.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.#ctor(Microsoft.Owin.Security.DataProtection.IDataProtectionProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData" />.</summary>
      <param name="provider">Proveedor de protección de datos.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Protect(System.String,System.String)">
      <summary>Protege los datos especificados.</summary>
      <returns>Datos protegidos.</returns>
      <param name="data">Datos que se van a proteger.</param>
      <param name="purpose">El motivo de la protección.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData.Unprotect(System.String,System.String)">
      <summary>Quita la protección sobre los datos especificados.</summary>
      <returns>Datos desprotegidos.</returns>
      <param name="protectedValue">Datos protegidos.</param>
      <param name="purpose">El motivo de la protección.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData">
      <summary>Proporciona métodos para la protección de datos.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Protect(System.String,System.String)">
      <summary>Protege los datos especificados.</summary>
      <returns>Datos protegidos.</returns>
      <param name="data">Datos que se van a proteger.</param>
      <param name="purpose">El motivo de la protección.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData.Unprotect(System.String,System.String)">
      <summary>Quita la protección sobre los datos especificados.</summary>
      <returns>Datos desprotegidos.</returns>
      <param name="protectedValue">Datos protegidos.</param>
      <param name="purpose">El motivo de la protección.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler">
      <summary>Proporciona una interfaz que representa la instancia que controla el kit para la certificación de aplicaciones (ACK).</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.CreateAck(System.String)">
      <summary>Crea un objeto ACK.</summary>
      <returns>El objeto ACK creado.</returns>
      <param name="id">El identificador.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IAckHandler.TriggerAck(System.String)">
      <summary>Desencadena un objeto ACK especificado.</summary>
      <returns>El resultado de la operación.</returns>
      <param name="id">El identificador ACK.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter">
      <summary>Represents the base interface for class that has the ability to write raw binary data.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter.Write(System.ArraySegment{System.Byte})">
      <summary>Writes raw binary data to underlying stream.</summary>
      <param name="data">The raw binary data to write.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager">
      <summary>Proporciona acceso a concentradores y referencias de conexiones persistentes.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetConnectionContext``1">
      <summary>Devuelve un <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</summary>
      <returns>El <see cref="T:Microsoft.AspNet.SignalR.IPersistentConnectionContext" /> para la <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</returns>
      <typeparam name="T">El tipo del objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext``1">
      <summary>Devuelve la información de concentrador asociada con la conexión.</summary>
      <returns>La información de concentrador asociada con la conexión.</returns>
      <typeparam name="T">El tipo del concentrador.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager.GetHubContext(System.String)">
      <summary>Devuelve la información de concentrador asociada con la conexión.</summary>
      <returns>La información de concentrador asociada con la conexión.</returns>
      <param name="hubName">El nombre del concentrador.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper">
      <summary>Representa la aplicación auxiliar para las operaciones atómicas para las variables compartidas entre varios subprocesos.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper.CompareExchangeOr(System.Int32@,System.Int32,System.Int32,System.Int32)">
      <summary>Compara dos objetos para la igualdad de referencia y si son iguales.</summary>
      <returns>true si los dos objetos son iguales; de lo contrario, false.</returns>
      <param name="location">El objeto de destino que se compara con comparand y posiblemente reemplazado. </param>
      <param name="value">El objeto que reemplaza el objeto de destino si la comparación resulta en igualdad.</param>
      <param name="comparandA">El primer comparand.</param>
      <param name="comparandB">El segundo comparand.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Close">
      <summary>Cierra el contador de rendimiento y libera todos los recursos asignados por esta instancia de contador de rendimiento.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.CounterName"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Decrement">
      <summary>Disminuye en uno los contadores de rendimiento asociados mediante una operación atómica eficiente.</summary>
      <returns>Valor del contador disminuido.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.Increment">
      <summary>Incrementa en uno los contadores de rendimiento asociados mediante una operación atómica eficiente.</summary>
      <returns>Valor del contador incrementado.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.IncrementBy(System.Int64)">
      <summary>Incrementa o disminuye el valor de contadores de rendimiento asociados en un número especificado mediante una operación atómica eficiente.</summary>
      <returns>Nuevo valor de contadores.</returns>
      <param name="value">Valor del incremento.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.NextSample">
      <summary>Obtiene un ejemplo de contador y devuelve un valor sin formato, o no calculado, para él.</summary>
      <returns>Un ejemplo de contador y devuelve un valor sin formato, o no calculado, para él.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RawValue">
      <summary>Obtiene o establece el valor sin formato, o no calculado, de este contador.</summary>
      <returns>Valor sin formato del contador.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter.RemoveInstance">
      <summary>Elimina la instancia de categoría especificada por la propiedad InstanceName del objeto PerformanceCounter.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager">
      <summary>Proporciona acceso a los contadores de rendimiento.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes que reciben las conexiones (servidor a cliente) por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes que recibieron las conexiones (servidor a cliente) desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes que envían las conexiones (cliente a servidor) por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes que enviaron las conexiones (cliente a servidor) desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsConnected">
      <summary>Obtiene el contador de rendimiento que representa el número total de eventos Connect de conexión desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsCurrent">
      <summary>Obtiene el contador de rendimiento que representa el número de conexiones actualmente conectadas.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsDisconnected">
      <summary>Obtiene el contador de rendimiento que representa el número total de eventos Disconnect de conexión desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ConnectionsReconnected">
      <summary>Obtiene el contador de rendimiento que representa el número total de eventos Reconnect de conexión desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de todos los errores procesados por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsAllTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de invocación de concentrador por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de invocación de concentrador procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de resolución de concentrador por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de resolución de concentrador procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de transporte de concentrador por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ErrorsTransportTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de transporte procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>Inicializa los contadores de rendimiento.</summary>
      <param name="instanceName">Nombre de la instancia del host.</param>
      <param name="hostShutdownToken">El CancellationToken que representa el cierre del host.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>Carga un contador de rendimiento.</summary>
      <param name="categoryName">Nombre de la categoría.</param>
      <param name="counterName">Nombre del contador.</param>
      <param name="instanceName">Nombre de la instancia.</param>
      <param name="isReadOnly">Indica si el contador es de solo lectura.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>Obtiene el contador de rendimiento que representa el número de trabajadores asignados para entregar mensajes en el bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusBusyWorkers">
      <summary>Obtiene el contador de rendimiento que representa el número de trabajadores actualmente ocupados con la entrega de mensajes en el bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes publicados en el bus de mensajes por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes publicados en el bus de mensajes desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes que reciben los suscriptores por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes que reciben los suscriptores desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>Obtiene el contador de rendimiento que representa el número actual de suscriptores al bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de suscriptores nuevos al bus de mensajes por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de suscriptores al bus de mensajes desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>Obtiene el contador de rendimiento que representa la cantidad actual de temas del bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de ampliación por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de ampliación desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes recibidos por el bus de mensajes de ampliación por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>Obtiene el contador de rendimiento que representa la longitud actual de la cola de envío de ampliación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>Obtiene el contador de rendimiento que representa el número de secuencias lógicas en el proveedor de bus de mensajes de ampliación configurado actualmente y que se encuentran en el estado de almacenamiento en búfer.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>Obtiene el contador de rendimiento que representa el número de secuencias lógicas en el proveedor de bus de mensajes de ampliación configurado actualmente y que se encuentran en el estado abierta.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>Obtiene el contador de rendimiento que representa el número de secuencias lógicas en el proveedor de bus de mensajes de ampliación configurado actualmente.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData">
      <summary>Representa una interfaz que proporciona métodos para cifrar y descifrar datos asociados con la infraestructura SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Protect(System.String,System.String)">
      <summary>Protege los datos especificados.</summary>
      <returns>Datos protegidos.</returns>
      <param name="data">Datos que se van a proteger.</param>
      <param name="purpose">El motivo de la protección.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IProtectedData.Unprotect(System.String,System.String)">
      <summary>Elimina la protección de los datos especificados.</summary>
      <returns>Datos desprotegidos.</returns>
      <param name="protectedValue">El valor protegido que se debe desproteger.</param>
      <param name="purpose">El motivo por el que se elimina la protección.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager">
      <summary>Genera el identificador de servidor.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager.ServerId">
      <summary>El identificador del servidor.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier">
      <summary>Proporciona una interfaz que representa una clase que reduce el tamaño de una cadena.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)">
      <summary>Reduce una cadena de modo que la pueda revertir esta instancia de <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" />.</summary>
      <returns>Una representación reducida de <paramref name="value" /> sin los caracteres siguientes :,|\</returns>
      <param name="value">La cadena que se reduce.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)">
      <summary>Una llamada a esta función indica que cualquier intento futuro de revertir las cadenas reducidas previamente de <paramref name="value" /> obtendrá un valor de retorno null.Esto proporciona la oportunidad de limpiar las estructuras de datos internas que hagan referencia a <paramref name="value" />.</summary>
      <param name="value">La cadena que se haya reducido previamente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)">
      <summary>Revierte una llamada <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> que se ejecutó al menos una vez previamente en esta instancia de <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> sin llamadas subsiguientes a <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" /> con el mismo argumento que la llamada <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> que devolvió <paramref name="value" />.</summary>
      <returns>El argumento de todas las llamadas anteriores a <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> que devolvieron <paramref name="value" />.Si todas las llamadas a <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> de esta instancia de <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier" /> nunca han devuelto <paramref name="value" /> o la llamada más reciente a <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" /> que devolvió <paramref name="value" /> estuvo seguida de una llamada a <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.RemoveUnminified(System.String)" /> con el mismo argumento, <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Unminify(System.String)" /> puede devolver null pero no throw.</returns>
      <param name="value">Una cadena reducida que devolvió una llamada anterior a <see cref="M:Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier.Minify(System.String)" />.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager">
      <summary>Administra los contadores de rendimiento mediante los contadores de rendimiento de Windows.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.DefaultDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" />.</summary>
      <param name="resolver">Resolución de dependencia predeterminada.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.#ctor(Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.CategoryName">
      <summary>Especifica el nombre de la categoría de este contador de rendimiento.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes que reciben las conexiones (servidor a cliente) por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesReceivedTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes que recibieron las conexiones (servidor a cliente) desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes que envían las conexiones (cliente a servidor) por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionMessagesSentTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes que enviaron las conexiones (cliente a servidor) desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsConnected">
      <summary>Obtiene el contador de rendimiento que representa el número total de eventos Connect de conexión desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsCurrent">
      <summary>Obtiene el contador de rendimiento que representa el número de conexiones actualmente conectadas.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsDisconnected">
      <summary>Obtiene el contador de rendimiento que representa el número total de eventos Disconnect de conexión desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ConnectionsReconnected">
      <summary>Obtiene el contador de rendimiento que representa el número total de eventos Reconnect de conexión desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de todos los errores procesados por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsAllTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de invocación de concentrador por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubInvocationTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de invocación de concentrador procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de resolución de concentrador por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsHubResolutionTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de resolución de concentrador procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de transporte de concentrador por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ErrorsTransportTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de transporte procesados desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.Initialize(System.String,System.Threading.CancellationToken)">
      <summary>Inicializa los contadores de rendimiento.</summary>
      <param name="instanceName">Nombre de la instancia del host.</param>
      <param name="hostShutdownToken">El CancellationToken que representa el cierre del host.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.LoadCounter(System.String,System.String,System.String,System.Boolean)">
      <summary>Carga el contador de rendimiento.</summary>
      <param name="categoryName">Nombre de la categoría.</param>
      <param name="counterName">Nombre del contador.</param>
      <param name="instanceName">Nombre de instancia.</param>
      <param name="isReadOnly">true si el contador es de solo lectura; de lo contrario, false.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusAllocatedWorkers">
      <summary>Obtiene el contador de rendimiento que representa el número de trabajadores asignados para entregar mensajes en el bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusBusyWorkers">
      <summary>Obtiene el contador de rendimiento que representa el número de trabajadores actualmente ocupados con la entrega de mensajes en el bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes publicados en el bus de mensajes por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesPublishedTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes publicados en el bus de mensajes desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes que reciben los suscriptores por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusMessagesReceivedTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de mensajes que reciben los suscriptores desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersCurrent">
      <summary>Obtiene el contador de rendimiento que representa el número actual de suscriptores al bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de suscriptores nuevos al bus de mensajes por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusSubscribersTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de suscriptores al bus de mensajes desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.MessageBusTopicsCurrent">
      <summary>Obtiene el contador de rendimiento que representa la cantidad actual de temas del bus de mensajes.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de errores de ampliación por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutErrorsTotal">
      <summary>Obtiene el contador de rendimiento que representa el número total de errores de ampliación desde el inicio de la aplicación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutMessageBusMessagesReceivedPerSec">
      <summary>Obtiene el contador de rendimiento que representa el número de mensajes recibidos por el bus de mensajes de ampliación por segundo.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutSendQueueLength">
      <summary>Obtiene el contador de rendimiento que representa la longitud actual de la cola de envío de ampliación.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountBuffering">
      <summary>Obtiene el contador de rendimiento que representa el número de secuencias lógicas en el proveedor de bus de mensajes de ampliación configurado actualmente y que se encuentran en el estado de almacenamiento en búfer.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountOpen">
      <summary>Obtiene el contador de rendimiento que representa el número de secuencias lógicas en el proveedor de bus de mensajes de ampliación configurado actualmente y que se encuentran en el estado abierta.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager.ScaleoutStreamCountTotal">
      <summary>Obtiene el contador de rendimiento que representa el número de secuencias lógicas en el proveedor de bus de mensajes de ampliación configurado actualmente.</summary>
      <returns>Devuelve <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.#ctor"></member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver">
      <summary>Provides method for resolving protocol.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.#ctor(System.Version,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver" /> class.</summary>
      <param name="min">The minimum version of the protocol to resolve.</param>
      <param name="max">The maximum version of the protocol to resolve.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver.Resolve(Microsoft.AspNet.SignalR.IRequest)">
      <summary>Resolves the protocol in the specified SignalR request.</summary>
      <param name="request">The request to resolve.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Purposes">
      <summary>Especifica las constantes de los propósitos.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.ConnectionToken">
      <summary>Constante ConnectionToken.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.Purposes.Groups">
      <summary>Constante Groups.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType">
      <summary>Especifica comandos de servidor.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Infrastructure.ServerCommandType.RemoveConnection">
      <summary>Comando RemoveConnection.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager">
      <summary>Implementación de <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.IServerIdManager" /> predeterminada.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Infrastructure.ServerIdManager.ServerId">
      <summary>Obtiene o establece el identificador del servidor.</summary>
      <returns>El identificador del servidor.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonValue">
      <summary>Representa un valor de JSON.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.CanConvertTo(System.Type)">
      <summary>Convierte el valor de parámetro al <see cref="T:System.Type" /> especificado.</summary>
      <returns>Valor de parámetro convertido.</returns>
      <param name="type">el <see cref="T:System.Type" /> al que se debe convertir el parámetro.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonValue.ConvertTo(System.Type)">
      <summary>Convierte el valor de parámetro al <see cref="T:System.Type" /> especificado.</summary>
      <returns>Valor de parámetro convertido.</returns>
      <param name="type">el <see cref="T:System.Type" /> al que se debe convertir el parámetro.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.IJsonWritable">
      <summary>Las implementaciones controlan su propia serialización a JSON.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.IJsonWritable.WriteJson(System.IO.TextWriter)">
      <summary>Se serializa a JSON a través de un <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">El <see cref="T:System.IO.TextWriter" /> que recibe el objeto serializado a JSON.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions">
      <summary> Extensiones para <see cref="T:Newtonsoft.Json.JsonSerializer" />. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>Deserializa el JSON a un objeto .NET.</summary>
      <returns>El objeto deserializado desde la cadena JSON.</returns>
      <param name="serializer">El serializador.</param>
      <param name="jsonBuffer">El búfer JSON que se va a deserializar.</param>
      <param name="encoding">La codificación que se utilizará.</param>
      <typeparam name="T">El <see cref="T:System.Type" /> del objeto que se deserializa.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Parse``1(Newtonsoft.Json.JsonSerializer,System.String)">
      <summary>Deserializa el JSON a un objeto .NET.</summary>
      <returns>El objeto deserializado desde la cadena JSON.</returns>
      <param name="serializer">El serializador.</param>
      <param name="json">El JSON que se va a deserializar.</param>
      <typeparam name="T">El <see cref="T:System.Type" /> del objeto que se deserializa.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Serialize(Newtonsoft.Json.JsonSerializer,System.Object,System.IO.TextWriter)">
      <summary>Serializa el objeto especificado en un <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="serializer">El serializador JSON.</param>
      <param name="value">Objeto que se va a serializar.</param>
      <param name="writer">El <see cref="T:System.IO.TextWriter" /> al que se debe serializar el objeto.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions.Stringify(Newtonsoft.Json.JsonSerializer,System.Object)">
      <summary>Serializa el objeto especificado a una cadena JSON.</summary>
      <returns>Una representación de cadena JSON del objeto.</returns>
      <param name="serializer">El serializador.</param>
      <param name="value">El objeto que se va a serializar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Json.JsonUtility">
      <summary> Clase de aplicación auxiliar para las operaciones JSON comunes. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CamelCase(System.String)">
      <summary>Convierte el nombre especificado en mayúsculas y minúsculas Camel.</summary>
      <returns>Valor de mayúsculas y minúsculas Camel del <paramref name="name" /> especificado.</returns>
      <param name="name">Valor al que se va a convertir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializer">
      <summary>Crea una instancia de <see cref="T:Newtonsoft.Json.JsonSerializer" /> con la configuración predeterminada.</summary>
      <returns>El objeto <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> recién creado.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateDefaultSerializerSettings">
      <summary>Crea una instancia <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> predeterminada.</summary>
      <returns>El objeto <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> recién creado.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Json.JsonUtility.CreateJsonpCallback(System.String,System.String)">
      <summary>Crea una devolución de llamada JSONP.</summary>
      <returns>
        <see cref="T:System.String" /> que representa la devolución de llamada.</returns>
      <param name="callback">Devolución de llamada que se va a crear.</param>
      <param name="payload">Carga.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JavaScriptMimeType">
      <summary>Obtiene el tipo MIME para el objeto JavaScript.</summary>
      <returns>Tipo MIME para el objeto JavaScript.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Json.JsonUtility.JsonMimeType">
      <summary>Obtiene el tipo MIME de esta utilidad JSON.</summary>
      <returns>Tipo MIME de esta utilidad JSON.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Command">
      <summary>Representa los comandos que se usan con la mensajería SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Command.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.Command" />.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.CommandType">
      <summary>Obtiene o establece el tipo de comandos.</summary>
      <returns>El tipo de comandos.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Id">
      <summary>Obtiene o establece el identificador del comando.</summary>
      <returns>Identificador de comando.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.Value">
      <summary>Obtiene o establece un valor del comando.</summary>
      <returns>El valor del comando.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Command.WaitForAck">
      <summary>Obtiene o establece si el comando debe esperar la certificación antes de la ejecución.</summary>
      <returns>true si se espera la certificación antes de la ejecución; de lo contrario, false.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.CommandType">
      <summary>Enumera los comandos para el mensaje de conexión.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Abort">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.AddToGroup">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Disconnect">
      <summary />
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.Initializing">
      <summary>Especifica el comando para inicializar la conexión.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.CommandType.RemoveFromGroup">
      <summary />
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.IMessageBus">
      <summary>Proporciona métodos usados para publicar y suscribir mensajes del bus de mensajes de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.IMessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Establece una suscripción a un tema para el suscriptor en el bus de mensajes.</summary>
      <returns>Estado de la suscripción.</returns>
      <param name="subscriber">Suscriptor.</param>
      <param name="cursor">Cursor de lectura que indica las tareas para la suscripción.</param>
      <param name="callback">La función de devolución de llamada.</param>
      <param name="maxMessages">Tamaño del búfer de mensajes.</param>
      <param name="state">Estado de la operación de devolución de llamada.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscriber">
      <summary>Proporciona los detalles del suscriptor en el bus de mensajes de SignalR.</summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyAdded"></member>
    <member name="E:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeyRemoved"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Identity"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.Subscription">
      <summary>Obtiene o establece la suscripción.</summary>
      <returns>Suscripción.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscriber.WriteCursor">
      <summary>Obtiene o establece el cursor de escritura.</summary>
      <returns>Cursor de escritura.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ISubscription">
      <summary>Proporciona métodos para realizar las tareas y controlar el estado de la subscripción.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ISubscription.Identity">
      <summary>Obtiene o establece la identidad de la suscripción.</summary>
      <returns>Identidad de la suscripción.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.SetQueued">
      <summary>Establece la suscripción en el estado de funcionamiento.</summary>
      <returns>true si la suscripción se estableció en el estado de funcionamiento; de lo contrario, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.UnsetQueued">
      <summary>Establece la suscripción en el estado de inactividad.</summary>
      <returns>true si se envió la suscripción al estado de inactividad; de lo contrario, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ISubscription.Work">
      <summary>Realiza tareas en el mensaje suscrito a través de esta suscripción.</summary>
      <returns>Tarea que representa la operación en el mensaje suscrito.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.#ctor(System.String,System.UInt64,Microsoft.AspNet.SignalR.Messaging.MessageStore{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo" />.</summary>
      <param name="key">Clave asociada con el evento local.</param>
      <param name="id">Identificador asociado con la información de clave.</param>
      <param name="store">Almacén de mensajes asociado con la clave de evento local.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Id">
      <summary>Obtiene o establece el identificador asociado con la información de clave.</summary>
      <returns>Identificador asociado con la información de clave.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.Key">
      <summary>Obtiene o establece la clave asociada con el evento local.</summary>
      <returns>Clave asociada con el evento local.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo.MessageStore">
      <summary>Obtiene el mensaje para la clave.</summary>
      <returns>Mensaje para la clave.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Message">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.ArraySegment{System.Byte})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.Message" />.</summary>
      <param name="source">Origen del mensaje.</param>
      <param name="key">Mensaje de clave.</param>
      <param name="value">Valor del mensaje.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.CommandId">
      <summary>Obtiene o establece el identificador de comando del mensaje.</summary>
      <returns>Identificador de comando del mensaje.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Encoding">
      <summary>La codificación del mensaje.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Filter">
      <summary>Obtiene o establece el filtro de mensajes.</summary>
      <returns>Filtro de mensajes.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.GetString"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsAck">
      <summary>Obtiene o establece un valor que indica si el mensaje es de confirmación.</summary>
      <returns>true si el mensaje es de confirmación; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.IsCommand">
      <summary>Obtiene un valor que indica si el mensaje es de comando.</summary>
      <returns>true si el mensaje es de comando; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Key">
      <summary>Obtiene o establece la clave para el mensaje.</summary>
      <returns>Clave para el mensaje.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.MappingId">
      <summary>El identificador de la carga.Solo se usa en escenarios de ampliación.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.ReadFrom(System.IO.Stream)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Source">
      <summary>Obtiene o establece el origen del mensaje.</summary>
      <returns>Origen del mensaje.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.StreamIndex">
      <summary>El índice de secuencias del que proviene este mensaje.Solo se usa en escenarios de ampliación.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.Value">
      <summary>Obtiene o establece el valor del mensaje.</summary>
      <returns>Valor del mensaje.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Message.WaitForAck">
      <summary>Obtiene o establece un valor que indica si el mensaje espera confirmación.</summary>
      <returns>true si el mensaje espera confirmación; de lo contrario, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Message.WriteTo(System.IO.Stream)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker">
      <summary>Programa el trabajo para que se lleve a cabo para una suscripción particular y cuenta con un algoritmo para seleccionar un grupo de trabajadores (subprocesos del grupo de subprocesos) que controlen el trabajo programado.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" />.</summary>
      <param name="performanceCounterManager">Administrador de contadores de rendimiento.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Dispose(System.Boolean)">
      <summary>Libera todos los recursos utilizados por <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageBroker" />.</summary>
      <param name="disposing">true para liberar los recursos administrados y los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Schedule(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>Programa el trabajo en la suscripción especificada.</summary>
      <param name="subscription">La suscripción que se debe programar.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBroker.Trace">
      <summary>Obtiene o establece el origen de seguimiento del agente.</summary>
      <returns>El origen de seguimiento del agente.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBus">
      <summary>Representa el bus de mensajes para SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.#ctor(Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager,System.Int32)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Counters"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Crea una nueva suscripción para el suscriptor.</summary>
      <returns>Suscripción recién creada.</returns>
      <param name="subscriber">Suscriptor.</param>
      <param name="cursor">Cursor de lectura que indica las tareas para la suscripción.</param>
      <param name="callback">La función de devolución de llamada.</param>
      <param name="messageBufferSize">Tamaño del búfer de mensajes.</param>
      <param name="state">Estado de la operación de devolución de llamada.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.CreateTopic(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Save(Microsoft.AspNet.SignalR.Messaging.Message)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.ScheduleEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBus.Subscribe(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Establece una suscripción a un tema para el suscriptor en el bus de mensajes.</summary>
      <returns>Estado de la suscripción.</returns>
      <param name="subscriber">Suscriptor.</param>
      <param name="cursor">Cursor de lectura que indica las tareas para la suscripción.</param>
      <param name="callback">La función de devolución de llamada.</param>
      <param name="maxMessages">Tamaño del búfer de mensajes.</param>
      <param name="state">Estado de la operación de devolución de llamada.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Topics"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageBus.Trace">
      <summary>Obtiene el origen de seguimiento usado para el seguimiento de la ejecución del código.</summary>
      <returns>Origen de seguimiento usado para el seguimiento de la ejecución del código.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions">
      <summary>Proporciona métodos de extensión al bus de mensajes de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Action{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Enumerate``1(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{``0,Microsoft.AspNet.SignalR.Messaging.Message},``0)">
      <summary>Enumera los mensajes.</summary>
      <param name="messages">Lista que contiene los mensajes que se enumerarán.</param>
      <param name="filter">Método que filtra el mensaje que se va a enumerar.</param>
      <param name="onMessage">Método que controla cada mensaje que se va a enumerar.</param>
      <param name="state">Objeto que representa el estado de la operación.</param>
      <typeparam name="T">Tipo del parámetro <paramref name="state" />.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions.Publish(Microsoft.AspNet.SignalR.Messaging.IMessageBus,System.String,System.String,System.String)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageResult">
      <summary>Representa un resultado de mensaje.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" />.</summary>
      <param name="terminal">true para indicar que es un resultado de mensaje de terminal; de lo contrario, false.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageResult.#ctor(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" />.</summary>
      <param name="messages">La matriz de mensajes asociados a <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageResult" />.</param>
      <param name="totalCount">La cantidad de mensajes incluidos en la matriz de mensajes.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Messages">
      <summary>Obtiene una <see cref="T:System.Collections.Generic.IList`1" /> asociada con el resultado.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> asociado con el resultado.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.Terminal">
      <summary>Obtiene o establece un valor que indica si este es un resultado de mensaje de terminal.</summary>
      <returns>true si es un resultado de mensaje de terminal; de lo contrario, false.</returns>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.MessageResult.TerminalMessage">
      <summary>Especifica si es un resultado de mensaje de terminal.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageResult.TotalCount">
      <summary>Obtiene o establece la cantidad de mensajes incluidos en la matriz de mensajes.</summary>
      <returns>La cantidad de mensajes incluidos en la matriz de mensajes.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1">
      <summary>Representa un almacén de mensajes respaldado por un búfer en anillo.</summary>
      <typeparam name="T">Tipo de elementos del almacén.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" /> con la capacidad especificada.</summary>
      <param name="capacity">Capacidad mínima del almacén.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.#ctor(System.UInt32,System.UInt32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStore`1" />.</summary>
      <param name="capacity">Capacidad mínima del almacén.</param>
      <param name="offset">Desplazamiento del primer mensaje en el almacén.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.Add(`0)">
      <summary>Agrega un mensaje al almacén y devuelve el identificador del mensaje recién agregado.</summary>
      <returns>Identificador del mensaje recién agregado.</returns>
      <param name="message">Mensaje que se va a agregar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessageCount">
      <summary>Obtiene el número de mensajes del almacén.</summary>
      <returns>Número de mensajes del almacén.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStore`1.GetMessages(System.UInt64,System.Int32)">
      <summary>Obtiene el siguiente lote de mensajes, comenzando por el identificador especificado. </summary>
      <returns>Siguiente lote de mensajes.</returns>
      <param name="firstMessageId">Identificador del primer mensaje.</param>
      <param name="maxMessages">Número máximo de mensajes que se devuelven.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1">
      <summary>Representa el resultado asociado con el almacén de mensajes.</summary>
      <typeparam name="T">Tipo de resultado.</typeparam>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.#ctor(System.UInt64,System.ArraySegment{`0},System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1" />.</summary>
      <param name="firstMessageId">El identificador del primer mensaje.</param>
      <param name="messages">El mensaje asociado con el resultado.</param>
      <param name="hasMoreData">true si el resultado contiene más datos; de lo contrario, false.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.FirstMessageId">
      <summary>Obtiene el identificador del primer mensaje.</summary>
      <returns>El identificador del primer mensaje.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.HasMoreData">
      <summary>Obtiene si el resultado contiene más datos.</summary>
      <returns>true si el resultado contiene más datos; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1.Messages">
      <summary>Obtiene el mensaje asociado con el resultado.</summary>
      <returns>El mensaje asociado con el resultado.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration">
      <summary>Representa la configuración común para las implementaciones del bus de mensajes de ampliación.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration" />.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.DisableQueuing">
      <summary>La puesta en cola está deshabilitada actualmente.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration.MaxQueueLength">
      <summary>Obtiene o establece la longitud máxima de la cola de envío saliente.</summary>
      <returns>La longitud máxima de la cola de envío saliente.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.#ctor(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.Id"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.LocalKeyInfo"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping.ServerCreationTime"></member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore">
      <summary>Represents a scale out mapping store on SignalR messaging.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.Add(System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo})">
      <summary>Adds a new scaleout mapping store.</summary>
      <param name="id">The identifier.</param>
      <param name="message">The message.</param>
      <param name="localKeyInfo">The local key information.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.GetEnumerator(System.UInt64)">
      <summary>Gets the enumerator for the mapping store.</summary>
      <returns>The enumerator for the mapping store.</returns>
      <param name="id">The identifier.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore.MaxMapping">
      <summary>Gets the maximum numbers of mapping for this instance.</summary>
      <returns>The maximum numbers of mapping for this instance.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage">
      <summary>Represents a message to the scaleout backplane.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.#ctor(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class.</summary>
      <param name="messages">The messages from SignalR.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.FromBytes(System.Byte[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> class from the specified data in bytes.</summary>
      <returns>The created instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" />.</returns>
      <param name="data">The data in bytes.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.Messages">
      <summary>Gets or sets the messages from SignalR.</summary>
      <returns>The messages from SignalR.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ServerCreationTime">
      <summary>Gets or sets the time the message was created on the origin server.</summary>
      <returns>The time the message was created on the origin server.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage.ToBytes">
      <summary>Converts a <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</summary>
      <returns>The converted <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage" /> object to bytes.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus">
      <summary>Representa una clase base común para las implementaciones del bus de mensajes de ampliación.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver,Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Close(System.Int32)">
      <param name="streamIndex">El índice de la secuencia que se va a cerrar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.CreateSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscriber,System.String,System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Dispose(System.Boolean)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnError(System.Int32,System.Exception)">
      <summary>Cierra la cola especificada para el envío de mensajes, lo que hace que todos los envíos tengan un error de forma asíncrona.</summary>
      <param name="streamIndex">El índice de la secuencia que se va a cerrar.</param>
      <param name="exception">El error que se produjo.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.OnReceived(System.Int32,System.UInt64,Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage)">
      <summary>Se invoca cuando se recibe una carga del backplane.Solo debería haber una llamada activa a la vez.</summary>
      <param name="streamIndex">El identificador de la secuencia.</param>
      <param name="id">Identificador de la carga dentro de la secuencia.</param>
      <param name="message">El mensaje de ampliación.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Open(System.Int32)">
      <param name="streamIndex">El índice de la secuencia que se va a abrir.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Publish(Microsoft.AspNet.SignalR.Messaging.Message)">
      <summary>Publica un mensaje desde el bus de mensajes de ampliación.</summary>
      <returns>Tarea que representa la operación para publicar un mensaje.</returns>
      <param name="message">El mensaje que se va a publicar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})">
      <summary>Envía los mensajes desde el bus de mensajes de ampliación de SignalR.</summary>
      <returns>Tarea que representa la operación para enviar un mensaje.</returns>
      <param name="messages">Mensajes que se van a enviar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.Send(System.Int32,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.Message})"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus.StreamCount">
      <summary>El número de secuencias no puede cambiar para la vida útil de esta instancia.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore">
      <summary>Represents a message store that is backed by a ring buffer.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore" /> class.</summary>
      <param name="capacity">The minimum capacity of the store.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.Add(Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping)">
      <summary>Adds a message to the store and returns the ID of the newly added message.</summary>
      <returns>The ID of the newly added message.</returns>
      <param name="mapping">The mapping used in the store.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentCount">
      <summary>Gets or sets the number of message fragments in the store.</summary>
      <returns>The number of message fragments.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.FragmentSize">
      <summary>Gets or sets the size of the message fragment.</summary>
      <returns>The size of the message fragment.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessages(System.UInt64)">
      <summary>Gets the next batch of messages, beginning with the specified ID. </summary>
      <returns>The next batch of messages.</returns>
      <param name="firstMessageIdRequestedByClient">The first message ID requested by the client.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.GetMessagesByMappingId(System.UInt64)">
      <summary>Gets the next batch of messages for the specified mapping ID.</summary>
      <returns>The next batch of messages.</returns>
      <param name="mappingId">The mapping ID.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.ScaleoutStore.MaxMapping">
      <summary>Gets or sets the maximum mapping ID.</summary>
      <returns>The maximum mapping ID.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription">
      <summary>Representa una suscripción ampliada.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription" />.</summary>
      <param name="identity">Identidad de la suscripción.</param>
      <param name="eventKeys">Claves de evento para la suscripción.</param>
      <param name="cursor">Cursor de escritura.</param>
      <param name="streams">Secuencias usadas para asociarlas con cursores de escritura.</param>
      <param name="callback">Función de devolución de llamada que se ejecuta cuando cambia el estado de la suscripción.</param>
      <param name="maxMessages">Número máximo de mensajes asignados para esta suscripción.</param>
      <param name="counters">Objeto usado para obtener acceso a los contadores de rendimiento de la suscripción.</param>
      <param name="state">Estado de la suscripción.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.BeforeInvoke(System.Object)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription.WriteCursor(System.IO.TextWriter)">
      <summary>Escribe el cursor usando el escritor de texto especificado.</summary>
      <param name="textWriter">Escritor de texto usado para escribir el cursor.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Subscription">
      <summary>Representa una implementación de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.ISubscription" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Func{Microsoft.AspNet.SignalR.Messaging.MessageResult,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.Subscription" />.</summary>
      <param name="identity">Identidad de la suscripción.</param>
      <param name="eventKeys">Lista que contiene las claves de evento para la suscripción.</param>
      <param name="callback">Función de devolución de llamada que se ejecuta cuando cambia el estado de la suscripción.</param>
      <param name="maxMessages">Número máximo de mensajes asignados para esta suscripción.</param>
      <param name="counters">Objeto usado para obtener acceso a los contadores de rendimiento de la suscripción.</param>
      <param name="state">Estado de la suscripción.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.AddEvent(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.BeforeInvoke(System.Object)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Disposable">
      <summary>Obtiene o establece el método usado para desechar los recursos de la suscripción.</summary>
      <returns>Método usado para desechar los recursos de la suscripción.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Dispose(System.Boolean)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.EventKeys"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.Identity"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Invoke(Microsoft.AspNet.SignalR.Messaging.MessageResult)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Subscription.MaxMessages"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.PerformWork(System.Collections.Generic.IList{System.ArraySegment{Microsoft.AspNet.SignalR.Messaging.Message}},System.Int32@,System.Object@)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.RemoveEvent(System.String)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetEventTopic(System.String,Microsoft.AspNet.SignalR.Messaging.Topic)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.SetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.UnsetQueued"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.Work"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Subscription.WriteCursor(System.IO.TextWriter)">
      <summary>Escribe el cursor usando el escritor de texto especificado.</summary>
      <param name="textWriter">Escritor de texto usado para escribir el cursor.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.Topic">
      <summary>Representa el tema en el bus de mensajes de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.#ctor(System.UInt32,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.Topic" />.</summary>
      <param name="storeSize">Tamaño del almacén de mensajes.</param>
      <param name="lifespan">Tiempo de vigencia del tema.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.AddSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>Agrega la suscripción especificada a la lista.</summary>
      <param name="subscription">Suscripción que se va a agregar.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.IsExpired">
      <summary>Obtiene un valor que indica si el tema ha expirado.</summary>
      <returns>true si el tema ha expirado; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.LastUsed">
      <summary>Obtiene o establece la última vez que se usó la suscripción.</summary>
      <returns>Última vez que se usó la suscripción.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.MarkUsed"></member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.Topic.RemoveSubscription(Microsoft.AspNet.SignalR.Messaging.ISubscription)">
      <summary>Elimina la suscripción especificada de la lista.</summary>
      <param name="subscription">Suscripción que se va a eliminar.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Store">
      <summary>Obtiene o establece el almacén de mensajes.</summary>
      <returns>Almacén de mensajes.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.SubscriptionLock">
      <summary>Obtiene o establece el objeto usado para bloquear el tema.</summary>
      <returns>Objeto usado para bloquear el tema.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.Topic.Subscriptions">
      <summary>Obtiene o establece la lista que contiene las suscripciones al tema.</summary>
      <returns>Lista que contiene las suscripciones al tema.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup">
      <summary>Representa una colección de temas que se usa como búsqueda.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Messaging.TopicLookup" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Clear">
      <summary>Quita todos los temas de la colección.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.ContainsKey(System.String)">
      <summary>Determina si el tema con la clave especificada se incluye en la colección.</summary>
      <returns>true si el tema con la clave especificada se incluye en la colección; en caso contrario, false.</returns>
      <param name="key">La clave del tema.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Count">
      <summary>Obtiene el número de todos los temas (generales y de grupo) de la colección.</summary>
      <returns>El número de todos los temas (generales y de grupo) de la colección.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetEnumerator">
      <summary>Obtiene el enumerador que se itera por toda la colección.</summary>
      <returns>El enumerador que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.GetOrAdd(System.String,System.Func{System.String,Microsoft.AspNet.SignalR.Messaging.Topic})">
      <summary>Agrega un tema a la colección mediante la función especificada, si la clave no existe ya.</summary>
      <returns>El tema generado para la clave especificada.</returns>
      <param name="key">La clave del tema que se va a agregar.</param>
      <param name="factory">La función que se usa para generar el tema de la clave.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Messaging.TopicLookup.Item(System.String)">
      <summary>Obtiene el tema con la clave especificada.</summary>
      <returns>El tema con la clave especificada, si se encuentra; null si el tema no se encuentra.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtiene el enumerador que se itera por toda la colección.</summary>
      <returns>El enumerador que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryGetValue(System.String,Microsoft.AspNet.SignalR.Messaging.Topic@)">
      <summary>Intenta obtener el tema con la clave especificada de la colección.</summary>
      <returns>true, si se encontró la clave; de lo contrario, false.</returns>
      <param name="key">La clave que se debe obtener.</param>
      <param name="topic">Cuando se devuelve este método, contiene el tema recuperado.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Messaging.TopicLookup.TryRemove(System.String)">
      <summary>Intenta quitar y devolver el tema con la clave especificada de la colección.</summary>
      <returns>El tema quitado.</returns>
      <param name="key">La clave del tema que se va a quitar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerRequest">
      <summary>Representa una solicitud de servidor.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerRequest" />.</summary>
      <param name="environment">El entorno.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Cookies">
      <summary>Obtiene las cookies asociadas con el servidor.</summary>
      <returns>Cookies asociadas con el servidor.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Environment"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Headers">
      <summary>Obtiene los encabezados asociados con la solicitud.</summary>
      <returns>Encabezados asociados con la solicitud.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.LocalPath"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.QueryString">
      <summary>Obtiene la colección de variables de cadena de consulta del servidor.</summary>
      <returns>Colección de variables de cadena de consulta del servidor.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerRequest.ReadForm"></member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.Url">
      <summary>Obtiene información acerca de la dirección URL de la solicitud actual.</summary>
      <returns>Objeto <see cref="T:System.Uri" /> que contiene información acerca de la dirección URL de la solicitud actual.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerRequest.User">
      <summary>Obtiene el usuario para este servidor.</summary>
      <returns>Usuario para este servidor.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.ServerResponse">
      <summary>Representa comentarios graves en respuesta a la solicitud.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Owin.ServerResponse" />.</summary>
      <param name="environment">El entorno.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.CancellationToken">
      <summary>Obtiene el token de cancelación asociado con la respuesta.</summary>
      <returns>El token de cancelación asociado con la respuesta.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Owin.ServerResponse.ContentType">
      <summary>Obtiene o establece el tipo de contenido asociado con la respuesta.</summary>
      <returns>El tipo de contenido asociado de la respuesta.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Flush">
      <summary>Vacía esta instancia.</summary>
      <returns>La instancia vaciada.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.ServerResponse.Write(System.ArraySegment{System.Byte})">
      <summary>Escribe una respuesta con el segmento de matriz asociado.</summary>
      <param name="data">El segmento de matriz.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware">
      <summary>Represents the middleware used by the hub dispatcher.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware">
      <summary>Representa el middleware para la conexión persistente.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.#ctor(Microsoft.Owin.OwinMiddleware,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware.Invoke(Microsoft.Owin.IOwinContext)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.ITraceManager">
      <summary>Representa una interfaz que proporciona propiedades para realizar el seguimiento de la ejecución del código.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Item(System.String)">
      <summary>Obtiene el objeto <see cref="T:System.Diagnostics.TraceSource" /> con el nombre especificado para el origen.</summary>
      <returns>El objeto <see cref="T:System.Diagnostics.TraceSource" /> con el nombre especificado para el origen.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.ITraceManager.Switch">
      <summary>Obtiene el modificador que controla el seguimiento de la ejecución de código y la salida de depuración.</summary>
      <returns>Objeto <see cref="T:System.Diagnostics.SourceSwitch" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Tracing.TraceManager">
      <summary>Proporciona propiedades que permite la ejecución de código de seguimiento.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Tracing.TraceManager" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Tracing.TraceManager.#ctor(System.Diagnostics.TextWriterTraceListener)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Item(System.String)">
      <summary>Obtiene el objeto <see cref="T:System.Diagnostics.TraceSource" /> con el nombre especificado para el origen.</summary>
      <returns>El objeto <see cref="T:System.Diagnostics.TraceSource" /> con el nombre especificado para el origen.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Tracing.TraceManager.Switch">
      <summary>Obtiene el modificador que controla el seguimiento de la ejecución de código y la salida de depuración.</summary>
      <returns>Objeto <see cref="T:System.Diagnostics.SourceSwitch" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport">
      <summary>Representa un transporte de tramas para siempre.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport" />.</summary>
      <param name="context">Contexto del host.</param>
      <param name="resolver">Resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Inicializa el objeto de respuesta.</summary>
      <returns>El objeto <see cref="T:System.Threading.Tasks.Task" /> que representa la operación de inicialización de la respuesta.</returns>
      <param name="connection">La conexión de transporte.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.KeepAlive">
      <summary>Mantiene la conexión activa.</summary>
      <returns>El objeto <see cref="T:System.Threading.Tasks.Task" /> que representa la operación de mantenimiento de conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.OutputWriter">
      <summary>Obtiene el editor de texto HTML que escribe la respuesta de contexto en la secuencia de salida.</summary>
      <returns>El editor de texto HTML que escribe la respuesta de contexto en la secuencia de salida.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envía la respuesta de contexto especificada.</summary>
      <returns>El objeto <see cref="T:System.Threading.Tasks.Task" /> que representa la operación de envío.</returns>
      <param name="response">Respuesta que se debe enviar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <param name="context">Contexto del host.</param>
      <param name="resolver">Resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <param name="context">Contexto del host.</param>
      <param name="jsonSerializer">Serializador JSON.</param>
      <param name="heartbeat">Latido del transporte.</param>
      <param name="performanceCounterWriter">Escritor de contadores de rendimiento.</param>
      <param name="traceManager">Administrador de seguimiento.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Connected">
      <summary>Obtiene o establece la función de conexión para <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <returns>Función de conexión para <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>Proporciona una operación para poner en cola para los transportes.</summary>
      <returns>Operación para poner en cola para los transportes.</returns>
      <param name="writeAsync">Escribe de forma asincrónica.</param>
      <param name="state">Objeto de estado.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializePersistentState">
      <summary>Inicializa el estado persistente del transporte para siempre.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Inicializa la respuesta de la conexión para el transporte para siempre.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="connection">La conexión de transporte.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.JsonSerializer">
      <summary>Obtiene el serializador JSON para el transporte para siempre.</summary>
      <returns>Serializador JSON para el transporte para siempre.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.LastMessageId">
      <summary>Obtiene el identificador del último mensaje para el transporte para siempre.</summary>
      <returns>Identificador del último mensaje para el transporte para siempre.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSending(System.String)">
      <summary>Proporciona la carga para un transporte de envío.</summary>
      <param name="payload">Carga de cadena.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.OnSendingResponse(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Proporciona una respuesta para los métodos de envío.</summary>
      <param name="response">Respuesta a una conexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Proporciona una conexión para procesar la solicitud.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="connection">La conexión de transporte.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.ProcessRequestCore(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Proporciona una solicitud para procesar la conexión para el transporte.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="connection">La conexión de transporte.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Received">
      <summary>Obtiene o establece una función de recepción para el transporte para siempre.</summary>
      <returns>Función de recepción para el transporte para siempre.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Reconnected">
      <summary>Obtiene o establece la función reconectada para el transporte para siempre.</summary>
      <returns>Función reconectada para el transporte para siempre.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envía una respuesta a una conexión para el transporte para siempre.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="response">La respuesta persistente.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ForeverTransport.Send(System.Object)">
      <summary>Envía un objeto al transporte para siempre.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="value">Valor que se va a enviar.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ForeverTransport.TransportConnected">
      <summary>Obtiene o establece el transporte conectado para <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</summary>
      <returns>Transporte conectado para <see cref="T:Microsoft.AspNet.SignalR.Transports.ForeverTransport" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITrackingConnection">
      <summary> Representa una conexión cuyo seguimiento se puede realizar mediante un <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" />. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary> Aplica un estado nuevo a la conexión. </summary>
      <param name="states">Uno de los valores de la enumeración <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates" />.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.CancellationToken"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectionId"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.ConnectTask"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Disconnect"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.DisconnectThreshold"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.End"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.IsTimedOut"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.KeepAlive"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.SupportsKeepAlive"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Timeout"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITrackingConnection.Url"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransport">
      <summary>Representa un transporte que comunica.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Connected">
      <summary>Obtiene o establece una devolución de llamada que se invoca cuando la conexión inicial se conecta al transporte.</summary>
      <returns>Devuelve <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.ConnectionId">
      <summary>Obtiene o establece el identificador de conexión del transporte.</summary>
      <returns>Devuelve <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Disconnected">
      <summary>Obtiene o establece una devolución de llamada que se invoca cuando se desconecta el transporte.</summary>
      <returns>Devuelve <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Procesa la <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> especificada para este transporte.</summary>
      <returns>Una <see cref="T:System.Threading.Tasks.Task" /> que se completa cuando el transporte ha finalizado el procesamiento de la conexión.</returns>
      <param name="connection">La <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" /> que se procesará.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Received">
      <summary>Obtiene o establece una devolución de llamada que se invoca cuando el transporte reciba datos.</summary>
      <returns>Devuelve <see cref="T:System.Func`2" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.Reconnected">
      <summary>Obtiene o establece una devolución de llamada que se invoca cuando el transporte se vuelve a conectar.</summary>
      <returns>Devuelve <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransport.Send(System.Object)">
      <summary>Envía datos a través del transporte.</summary>
      <returns>Una <see cref="T:System.Threading.Tasks.Task" /> que se completa una vez completado el envío.</returns>
      <param name="value">El valor que se va a enviar.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.ITransport.TransportConnected">
      <summary>Obtiene o establece una devolución de llamada que se invoca cuando el transporte se conecta.</summary>
      <returns>Devuelve <see cref="T:System.Func`1" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection">
      <summary>Representa el transporte para la conexión.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Receive(System.String,System.Func{Microsoft.AspNet.SignalR.Transports.PersistentResponse,System.Object,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Object)">
      <summary>Recibe datos de suscripción del transporte.</summary>
      <returns>Datos de suscripción del transporte.</returns>
      <param name="messageId">Identificador del mensaje para la suscripción.</param>
      <param name="callback">Método que controla el mensaje recibido.</param>
      <param name="maxMessages">Tamaño del búfer de mensajes.</param>
      <param name="state">Estado de la conexión del transporte.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportConnection.Send(Microsoft.AspNet.SignalR.ConnectionMessage)"></member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat">
      <summary>Administra el seguimiento del estado de las conexiones.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Agrega una nueva conexión a la lista de conexiones controladas.</summary>
      <returns>La conexión que la reemplazó, si la hay.</returns>
      <param name="connection">La conexión que se debe agregar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.GetConnections">
      <summary>Obtiene una lista de las conexiones controladas.</summary>
      <returns>Una lista de conexiones.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Marca una conexión existente como activa.</summary>
      <param name="connection">La conexión que se debe marcar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Quita una conexión de la lista de conexiones controladas.</summary>
      <param name="connection">La conexión que se va a quitar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ITransportManager">
      <summary>Administra los transportes para las conexiones.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Obtiene el transporte especificado para el <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> especificado.</summary>
      <returns>El <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" /> para el <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> especificado.</returns>
      <param name="hostContext">El <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> para la solicitud actual.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ITransportManager.SupportsTransport(System.String)">
      <summary>Determina si se admite el transporte especificado.</summary>
      <returns>Es true si el transporte se admite; de lo contrario, es false.</returns>
      <param name="transportName">El nombre del transporte que se debe probar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.LongPollingTransport" />.</summary>
      <param name="context">Contexto del host.</param>
      <param name="resolver">Resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager,Microsoft.AspNet.SignalR.Configuration.IConfigurationManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Connected">
      <summary>Obtiene o establece la función conectada.</summary>
      <returns>Función conectada.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.DisconnectThreshold">
      <summary>Obtiene el umbral de desconexión.</summary>
      <returns>Umbral de desconexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.IsConnectRequest">
      <summary>Obtiene un valor que indica si el transporte es una solicitud de conexión.</summary>
      <returns>true si el transporte es una solicitud de conexión; de lo contrario, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Procesa la solicitud de conexión.</summary>
      <returns>Tarea que representa la operación de la solicitud.</returns>
      <param name="connection">Conexión que se procesará.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Received">
      <summary>Obtiene o establece la función recibida.</summary>
      <returns>Función recibida.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Reconnected">
      <summary>Obtiene o establece el transporte reconectado.</summary>
      <returns>Tarea que reconecta el transporte.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envía una respuesta para el transporte.</summary>
      <returns>Tarea que representa la operación para enviar una respuesta.</returns>
      <param name="response">Respuesta que se debe enviar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.Send(System.Object)">
      <summary>Envía un transporte de sondeo prolongado con un valor dado.</summary>
      <returns>La tarea que representa la operación para enviar un transporte de sondeo prolongado.</returns>
      <param name="value">Valor.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.SupportsKeepAlive">
      <summary>Obtiene un valor que indica si el transporte admite la persistencia de la conexión.</summary>
      <returns>true si el transporte admite la persistencia de la conexión; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.LongPollingTransport.TransportConnected">
      <summary>Obtiene o establece el transporte conectado.</summary>
      <returns>Tarea que conecta el transporte.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse">
      <summary> Representa una respuesta a una conexión. </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.#ctor(System.Func{Microsoft.AspNet.SignalR.Messaging.Message,System.Boolean},System.Action{System.IO.TextWriter})">
      <summary>Crea una instancia nueva de <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" />.</summary>
      <param name="exclude">Filtro que determina si se deben escribir mensajes en el cliente.</param>
      <param name="writeCursor">El editor de cursores.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Aborted">
      <summary>Obtiene o establece un valor que indica si la conexión se cerró forzosamente.</summary>
      <returns>true si la conexión se cerró de manera forzosa. De lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Disconnect">
      <summary>Obtiene o define un valor que indica si la conexión recibe un comando de desconexión.</summary>
      <returns>true si la conexión recibe un comando de desconexión. De lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.GroupsToken">
      <summary>Obtiene o establece un token firmado que representa la lista de grupos.</summary>
      <returns>Grupos del token</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Initializing">
      <summary>True si la conexión se está inicializando.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.LongPollDelay">
      <summary>Obtiene o define el tiempo que debe esperar el cliente de sondeo largo antes de volver a establecer una conexión si no se reciben datos.</summary>
      <returns>El tiempo que debe esperar el cliente de sondeo largo antes de volver a establecer una conexión cuando no se reciben datos.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Messages">
      <summary>Obtiene o define la lista de mensajes que se deben enviar a la conexión de recepción.</summary>
      <returns>Lista de mensajes que se deben enviar a la conexión de recepción.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Microsoft#AspNet#SignalR#Json#IJsonWritable#WriteJson(System.IO.TextWriter)">
      <summary>Serializa únicamente los componentes necesarios de <see cref="T:Microsoft.AspNet.SignalR.Transports.PersistentResponse" /> a JSON mediante el objeto JsonTextWriter de Json.NET para mejorar el rendimiento.</summary>
      <param name="writer">El <see cref="T:System.IO.TextWriter" /> que recibe la serialización JSON.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Reconnect">
      <summary>True si el cliente debe intentar la reconexión.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.Terminal"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.PersistentResponse.TotalCount">
      <summary>Obtiene o define el número total de mensajes enviados a la conexión de recepción.</summary>
      <returns>Número total de mensajes enviados a la conexión de recepción.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport">
      <summary>Proporciona el transporte para enviar eventos desde el servidor de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" />.</summary>
      <param name="context">Contexto del host.</param>
      <param name="resolver">La resolución del objeto IDependency.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.InitializeResponse(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Inicializar una respuesta al objeto <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" />.</summary>
      <returns>La respuesta de inicialización al objeto <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportConnection" />.</returns>
      <param name="connection">La inicialización de la conexión de transporte.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.KeepAlive">
      <summary>Devuelve un método de mantenimiento de conexión para establecer una conexión persistente al recurso de Internet.</summary>
      <returns>Un método de mantenimiento de conexión para establecer una conexión persistente al recurso de Internet.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envía una respuesta persistente al objeto <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" />.</summary>
      <returns>Una respuesta persistente que se enviará al objeto <see cref="T:Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport" />.</returns>
      <param name="response">La respuesta persistente.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates">
      <summary>Enumera el atributo del objeto TransportConnectionState.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Aborted">
      <summary>La conexión anulada del estado.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Added">
      <summary>La conexión agregada del estado.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disconnected">
      <summary>La conexión desconectada del estado.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.DisconnectMessageReceived">
      <summary>El mensaje de desconexión que se recibe del estado.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Disposed">
      <summary>La conexión descartada del estado.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.HttpRequestEnded">
      <summary>La solicitud HTTP finalizada del estado de conexión.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.None">
      <summary>El estado de sin conexión.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.QueueDrained">
      <summary>La cola vaciada del estado de conexión.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Removed">
      <summary>La conexión quitada del estado.</summary>
    </member>
    <member name="F:Microsoft.AspNet.SignalR.Transports.TransportConnectionStates.Replaced">
      <summary>La conexión reemplazada del estado.</summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
      <param name="context">Contexto del host.</param>
      <param name="heartbeat">Latido del transporte.</param>
      <param name="performanceCounterManager">Administrador de contadores de rendimiento.</param>
      <param name="traceManager">Administrador de seguimiento.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort">
      <summary>Anula el proceso de la tarea actual para <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
      <returns>Proceso de la tarea actual que se anula para <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Abort(System.Boolean)">
      <summary>Anula el proceso de la tarea actual para <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
      <returns>Proceso de la tarea actual que se anula para <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</returns>
      <param name="clean">Indica si deben limpiarse todas las tareas del proceso anulado.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ApplyState(Microsoft.AspNet.SignalR.Transports.TransportConnectionStates)">
      <summary>Aplica el estado de conexión del transporte para la base de desconexión.</summary>
      <param name="states">Estado de conexión del transporte.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CancellationToken">
      <summary>Obtiene un token de cancelación que representa la vida de la conexión.</summary>
      <returns>Token de cancelación que representa la vida de la conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Connection">
      <summary>Obtiene o establece la conexión de transporte para la base de desconexión del transporte.</summary>
      <returns>Conexión de transporte para la base de desconexión del transporte.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionEndToken">
      <summary>Obtiene la conexión para finalizar la operación de este token.</summary>
      <returns>Conexión para finalizar la operación de este token.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectionId">
      <summary>Obtiene o establece el identificador de la conexión.</summary>
      <returns>Cadena que contiene el identificador de la conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.ConnectTask"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Context">
      <summary>Obtiene el contexto de host asociado con la base de desconexión del transporte.</summary>
      <returns>Contexto de host asociado con la base de desconexión del transporte.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.CreateResponseWriter">
      <summary>Representa un escritor para crear una respuesta para la base de desconexión del transporte.</summary>
      <returns>Escritor para crear una respuesta para la base de desconexión del transporte.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnect">
      <summary>Provoca la desconexión de la conexión.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Disconnected">
      <summary>Obtiene o establece la propiedad disconnected para el transporte de la conexión.</summary>
      <returns>Propiedad disconnected para el transporte de la conexión.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.DisconnectThreshold">
      <summary>Obtiene el intervalo de tiempo que se debe esperar después de terminarse la conexión y antes de activar la desconexión de la conexión.</summary>
      <returns>Devuelve <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose">
      <summary>Libera todos los recursos que usa la instancia actual de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase" /> y, opcionalmente, libera los recursos administrados.</summary>
      <param name="disposing">true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.End">
      <summary>Cierra la conexión.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Threading.Tasks.Task})">
      <summary>Representa el objeto para finalizar la operación de cola.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="writeAsync">Escribe de forma asincrónica.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.EnqueueOperation(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)">
      <summary>Representa el objeto para finalizar la operación de cola.</summary>
      <returns>Objeto que representa el final de la operación de cola.</returns>
      <param name="writeAsync">Escribe de forma asincrónica.</param>
      <param name="state">Estado.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Heartbeat">
      <summary>Obtiene el latido del transporte para administrar el estado de seguimiento de las conexiones.</summary>
      <returns>Latido del transporte para administrar el estado de seguimiento de las conexiones.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.HostShutdownToken"></member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IncrementErrors">
      <summary>Incrementa los errores para la base de desconexión del transporte.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.InitializePersistentState">
      <summary>Inicializa el estado persistente para la base de desconexión del transporte.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAbortRequest">
      <summary>Obtiene un valor que representa si la conexión solicita la anulación.</summary>
      <returns>true si la conexión solicita la anulación; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsAlive">
      <summary>Obtiene un valor que representa si la conexión está activa.</summary>
      <returns>true si la conexión está activa; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsConnectRequest">
      <summary>Obtiene un valor que representa si las conexiones hacen una solicitud.</summary>
      <returns>true si las conexiones hacen una solicitud; de lo contrario, false.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.IsTimedOut">
      <summary>Obtiene un valor que representa si la conexión agotó el tiempo de espera.</summary>
      <returns>true si se agotó el tiempo de espera de la conexión; de lo contrario, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.KeepAlive">
      <summary>Envía un ping de mantenimiento de conexión sobre la conexión.</summary>
      <returns>Devuelve <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.OutputWriter">
      <summary>Obtiene el escritor de salida que puede escribir una serie secuencial de caracteres.</summary>
      <returns>Escritor de salida que puede escribir una serie secuencial de caracteres.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.SupportsKeepAlive">
      <summary>Obtiene un valor que representa si el transporte admite la persistencia de la conexión.</summary>
      <returns>true si el transporte admite la persistencia de la conexión; de lo contrario, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Timeout">
      <summary>Provoca el agotamiento del tiempo de espera de la conexión.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Trace">
      <summary>Obtiene el origen para realizar el seguimiento del código y asociar los mensajes de seguimiento con su origen.</summary>
      <returns>Origen para realizar el seguimiento del código y asociar los mensajes de seguimiento con su origen.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase.Url">
      <summary>Obtiene el URI de la conexión.</summary>
      <returns>URI de la conexión.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat">
      <summary>Representa la implementación predeterminada de <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" />.</summary>
      <param name="resolver">La <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" />.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.AddOrUpdateConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Agrega una nueva conexión a la lista de conexiones controladas.</summary>
      <param name="connection">La conexión que se debe agregar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose">
      <summary>Libera todos los recursos que usa la instancia actual de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" />.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat" /> y, opcionalmente, libera los recursos administrados.</summary>
      <param name="disposing">true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.GetConnections">
      <summary>Obtiene una lista de las conexiones controladas.</summary>
      <returns>Una lista de conexiones.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.MarkConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Marca una conexión existente como activa.</summary>
      <param name="connection">La conexión que se debe marcar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportHeartbeat.RemoveConnection(Microsoft.AspNet.SignalR.Transports.ITrackingConnection)">
      <summary>Quita una conexión de la lista de conexiones controladas.</summary>
      <param name="connection">La conexión que se va a quitar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.TransportManager">
      <summary>Implementación de <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransportManager" /> predeterminada.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.#ctor(Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.TransportManager" />.</summary>
      <param name="resolver">La <see cref="T:Microsoft.AspNet.SignalR.IDependencyResolver" /> predeterminada.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.GetTransport(Microsoft.AspNet.SignalR.Hosting.HostContext)">
      <summary>Obtiene el transporte especificado para el <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> especificado.</summary>
      <returns>El <see cref="T:Microsoft.AspNet.SignalR.Transports.ITransport" /> para el <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> especificado.</returns>
      <param name="hostContext">El <see cref="T:Microsoft.AspNet.SignalR.Hosting.HostContext" /> para la solicitud actual.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Register(System.String,System.Func{Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.Transports.ITransport})">
      <summary>Agrega un nuevo transporte a la lista de transportes admitidos.</summary>
      <param name="transportName">El transporte especificado.</param>
      <param name="transportFactory">El método de generador para el transporte especificado.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.Remove(System.String)">
      <summary>Quita un transporte de la lista de transportes admitidos.</summary>
      <param name="transportName">El transporte especificado.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.TransportManager.SupportsTransport(System.String)">
      <summary>Determina si se admite el transporte especificado.</summary>
      <returns>Es true si el transporte se admite; de lo contrario, es false.</returns>
      <param name="transportName">El nombre del transporte que se debe probar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport">
      <summary>No se actualizará ningún contenido aquí; no agregue material aquí.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Microsoft.AspNet.SignalR.IDependencyResolver)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.AspNet.SignalR.Transports.WebSocketTransport" />.</summary>
      <param name="context">Contexto del host.</param>
      <param name="resolver">Resolución de dependencia.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.#ctor(Microsoft.AspNet.SignalR.Hosting.HostContext,Newtonsoft.Json.JsonSerializer,Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat,Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager,Microsoft.AspNet.SignalR.Tracing.ITraceManager)"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CancellationToken">
      <summary>Obtiene el token de cancelación usado para el transporte.</summary>
      <returns>Token de cancelación usado para el transporte.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.CreateResponseWriter"></member>
    <member name="P:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.IsAlive">
      <summary>Obtiene un valor que indica si el transporte está activo.</summary>
      <returns>true si el transporte está activo; de lo contrario, false.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.KeepAlive">
      <summary>Mantiene el transporte activo.</summary>
      <returns>Tarea que mantiene el transporte activo.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.ProcessRequest(Microsoft.AspNet.SignalR.Transports.ITransportConnection)">
      <summary>Procesa una solicitud de conexión.</summary>
      <returns>Tarea que representa la operación para solicitar una conexión.</returns>
      <param name="connection">La conexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(Microsoft.AspNet.SignalR.Transports.PersistentResponse)">
      <summary>Envía una respuesta de socket web.</summary>
      <returns>Tarea que representa la operación para enviar una respuesta.</returns>
      <param name="response">Respuesta que se debe enviar.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Transports.WebSocketTransport.Send(System.Object)">
      <summary>Envía un valor del transporte.</summary>
      <returns>Tarea que representa la operación para enviar un valor del transporte.</returns>
      <param name="value">Valor que se va a enviar.</param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler">
      <summary>Representa una instancia que administra los sockets web de SignalR.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.#ctor(System.Nullable{System.Int32})"></member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Close">
      <summary>Cierra esta instancia.</summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Error">
      <summary>Obtiene o establece el error durante el control del socket web.</summary>
      <returns>El error durante el control del socket web.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.MaxIncomingMessageSize">
      <summary>Obtiene el tamaño máximo de mensajes entrantes.</summary>
      <returns>El tamaño máximo de mensajes entrantes.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnClose(System.Boolean)">
      <summary>Se produce cuando se cierra la instancia.</summary>
      <param name="clean">true para limpiar los seguimientos.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnError">
      <summary>Lanza un evento cuando se produce un error durante la operación del controlador.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.Byte[])">
      <summary>Lanza un evento cuando se recibe un mensaje.</summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnMessage(System.String)">
      <summary>Lanza un evento cuando se recibe un mensaje.</summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.OnOpen">
      <summary>Lanza un evento cuando se abre esta instancia.</summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.ProcessWebSocketRequestAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
      <summary>Procesa de manera asíncrona la solicitud que recibe el controlador.</summary>
      <returns>El resultado de la operación.</returns>
      <param name="webSocket">El socket web.</param>
      <param name="disconnectToken">El token de desconexión.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.Send(System.String)">
      <summary>Envía un mensaje asociado con el controlador.</summary>
      <returns>El mensaje enviado.</returns>
      <param name="message">El mensaje que se debe enviar.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler.WebSocket">
      <summary>Obtiene o establece socket web.</summary>
      <returns>El socket web.</returns>
    </member>
    <member name="T:Owin.ObsoleteOwinExtensions"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapConnection(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="M:Owin.ObsoleteOwinExtensions.MapHubs(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)"></member>
    <member name="T:Owin.OwinExtensions">
      <summary>Representa la conexión para las extensiones Owin.</summary>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder)">
      <summary>Asigna concentradores de SignalR a la canalización del generador de aplicaciones en "/signalr".</summary>
      <returns>Devuelve <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Generador de aplicaciones.</param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Asigna concentradores de SignalR a la canalización del generador de aplicaciones en "/signalr".</summary>
      <returns>Devuelve <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Generador de aplicaciones.</param>
      <param name="configuration">El objeto <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> que se va a usar. </param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String)">
      <summary>Asigna el objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> de SignalR especificado a la canalización del generador de aplicaciones en la ruta de acceso especificada. </summary>
      <returns>Devuelve <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Generador de aplicaciones.</param>
      <param name="path">La ruta de acceso para asignar el objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /></param>
      <typeparam name="TConnection">El tipo de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR``1(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>Asigna el objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> de SignalR especificado a la canalización del generador de aplicaciones en la ruta de acceso especificada. </summary>
      <returns>Devuelve <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Generador de aplicaciones.</param>
      <param name="path">Ruta de acceso para asignar la conexión persistente.</param>
      <param name="configuration">El objeto <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> que se va a usar </param>
      <typeparam name="TConnection">El tipo de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Asigna concentradores de SignalR a la canalización del generador de aplicaciones en la ruta de acceso especificada.</summary>
      <returns>Devuelve <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Generador de aplicaciones.</param>
      <param name="path">Ruta de acceso para asignar concentradores de SignalR.</param>
      <param name="configuration">El objeto <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> que se va a usar </param>
    </member>
    <member name="M:Owin.OwinExtensions.MapSignalR(Owin.IAppBuilder,System.String,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>Asigna el objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> especificado a la canalización del generador de aplicaciones en la ruta de acceso especificada. </summary>
      <returns>Devuelve <see cref="T:Owin.IAppBuilder" />.</returns>
      <param name="builder">Generador de aplicaciones.</param>
      <param name="path">Ruta de acceso para asignar la conexión persistente.</param>
      <param name="connectionType">El tipo de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
      <param name="configuration">El objeto <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> que se va a usar </param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder)">
      <summary>Agrega concentradores de SignalR a la canalización del generador de aplicaciones.</summary>
      <param name="builder">Generador de aplicaciones.</param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder)">
      <summary>Agrega el objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> de SignalR especificado al generador de aplicaciones. </summary>
      <param name="builder">Generador de aplicaciones.</param>
      <typeparam name="TConnection">El tipo de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR``1(Owin.IAppBuilder,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <param name="builder">Generador de aplicaciones.</param>
      <param name="configuration">El objeto <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> que se va a usar</param>
      <typeparam name="TConnection">Agrega el objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> de SignalR especificado al generador de aplicaciones. </typeparam>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,Microsoft.AspNet.SignalR.HubConfiguration)">
      <summary>Agrega concentradores de SignalR a la canalización del generador de aplicaciones.</summary>
      <param name="builder">Generador de aplicaciones.</param>
      <param name="configuration">El objeto <see cref="T:Microsoft.AspNet.SignalR.HubConfiguration" /> que se va a usar </param>
    </member>
    <member name="M:Owin.OwinExtensions.RunSignalR(Owin.IAppBuilder,System.Type,Microsoft.AspNet.SignalR.ConnectionConfiguration)">
      <summary>Agrega el objeto <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" /> de SignalR especificado al generador de aplicaciones. </summary>
      <param name="builder">Generador de aplicaciones.</param>
      <param name="connectionType">El tipo de <see cref="T:Microsoft.AspNet.SignalR.PersistentConnection" />.</param>
      <param name="configuration">El objeto <see cref="T:Microsoft.AspNet.SignalR.ConnectionConfiguration" /> que se va a usar </param>
    </member>
    <member name="T:System.Diagnostics.TraceSourceExtensions">
      <summary>Provides extension methods for used by SignalR.</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace error message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace error message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace verbose message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="msg">The trace warning message to write.</param>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>Writes trace warning message to the specified trace source.</summary>
      <param name="traceSource">The trace source to write to.</param>
      <param name="format">The message format to write to.</param>
      <param name="args">The arguments associated with the <paramref name="format" />.</param>
    </member>
  </members>
</doc>